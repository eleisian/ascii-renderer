{"ast":null,"code":"import _classCallCheck from \"/Users/ewang/Documents/Github/ascii-renderer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ewang/Documents/Github/ascii-renderer/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/ewang/Documents/Github/ascii-renderer/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/ewang/Documents/Github/ascii-renderer/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { AmbientLight, AnimationClip, Bone, BufferGeometry, ClampToEdgeWrapping, Color, DirectionalLight, EquirectangularReflectionMapping, Euler, FileLoader, Float32BufferAttribute, Group, Line, LineBasicMaterial, Loader, LoaderUtils, MathUtils, Matrix3, Matrix4, Mesh, MeshLambertMaterial, MeshPhongMaterial, NumberKeyframeTrack, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, PropertyBinding, Quaternion, QuaternionKeyframeTrack, RepeatWrapping, Skeleton, SkinnedMesh, SpotLight, Texture, TextureLoader, Uint16BufferAttribute, Vector3, Vector4, VectorKeyframeTrack, sRGBEncoding } from 'three';\nimport * as fflate from '../libs/fflate.module.js';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nvar fbxTree;\nvar connections;\nvar sceneGraph;\nvar FBXLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(FBXLoader, _Loader);\n  var _super = _createSuper(FBXLoader);\n  function FBXLoader(manager) {\n    _classCallCheck(this, FBXLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(FBXLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n        fbxTree = new TextParser().parse(FBXText);\n      }\n\n      // console.log( fbxTree );\n\n      var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n    }\n  }]);\n  return FBXLoader;\n}(Loader); // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\nvar FBXTreeParser = /*#__PURE__*/function () {\n  function FBXTreeParser(textureLoader, manager) {\n    _classCallCheck(this, FBXTreeParser);\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  _createClass(FBXTreeParser, [{\n    key: \"parse\",\n    value: function parse() {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    }\n\n    // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n  }, {\n    key: \"parseConnections\",\n    value: function parseConnections() {\n      var connectionMap = new Map();\n      if ('Connections' in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n      return connectionMap;\n    }\n\n    // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n  }, {\n    key: \"parseImages\",\n    value: function parseImages() {\n      var images = {};\n      var blobs = {};\n      if ('Video' in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n        for (var nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename;\n\n          // raw image data is in videoNode.Content\n          if ('Content' in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n      for (var _id in images) {\n        var filename = images[_id];\n        if (blobs[filename] !== undefined) images[_id] = blobs[filename];else images[_id] = images[_id].split('\\\\').pop();\n      }\n      return images;\n    }\n\n    // Parse embedded image data in FBXTree.Video.Content\n  }, {\n    key: \"parseImage\",\n    value: function parseImage(videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n      var type;\n      switch (extension) {\n        case 'bmp':\n          type = 'image/bmp';\n          break;\n        case 'jpg':\n        case 'jpeg':\n          type = 'image/jpeg';\n          break;\n        case 'png':\n          type = 'image/png';\n          break;\n        case 'tif':\n          type = 'image/tiff';\n          break;\n        case 'tga':\n          if (this.manager.getHandler('.tga') === null) {\n            console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n          }\n          type = 'image/tga';\n          break;\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n      if (typeof content === 'string') {\n        // ASCII format\n\n        return 'data:' + type + ';base64,' + content;\n      } else {\n        // Binary Format\n\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    }\n\n    // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n  }, {\n    key: \"parseTextures\",\n    value: function parseTextures(images) {\n      var textureMap = new Map();\n      if ('Texture' in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n        for (var nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n      return textureMap;\n    }\n\n    // Parse individual node in FBXTree.Objects.Texture\n  }, {\n    key: \"parseTexture\",\n    value: function parseTexture(textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n      // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n      // 0: repeat(default), 1: clamp\n\n      texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      if ('Scaling' in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n      if ('Translation' in textureNode) {\n        var _values = textureNode.Translation.value;\n        texture.offset.x = _values[0];\n        texture.offset.y = _values[1];\n      }\n      return texture;\n    }\n\n    // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n      if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n        fileName = images[children[0].ID];\n        if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n          this.textureLoader.setPath(undefined);\n        }\n      }\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n      if (extension === 'tga') {\n        var loader = this.manager.getHandler('.tga');\n        if (loader === null) {\n          console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n          texture = new Texture();\n        } else {\n          loader.setPath(this.textureLoader.path);\n          texture = loader.load(fileName);\n        }\n      } else if (extension === 'psd') {\n        console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    }\n\n    // Parse nodes in FBXTree.Objects.Material\n  }, {\n    key: \"parseMaterials\",\n    value: function parseMaterials(textureMap) {\n      var materialMap = new Map();\n      if ('Material' in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n        for (var nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n      return materialMap;\n    }\n\n    // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel;\n\n      // Case where FBX wraps shading model in property object.\n      if (typeof type === 'object') {\n        type = type.value;\n      }\n\n      // Ignore unused materials which don't have any connections.\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n      switch (type.toLowerCase()) {\n        case 'phong':\n          material = new MeshPhongMaterial();\n          break;\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new MeshPhongMaterial();\n          break;\n      }\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    }\n\n    // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n  }, {\n    key: \"parseParameters\",\n    value: function parseParameters(materialNode, textureMap, ID) {\n      var parameters = {};\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n      if (materialNode.Diffuse) {\n        parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n        parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n      }\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n      if (materialNode.Emissive) {\n        parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\n        parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n      }\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n      if (parameters.opacity < 1.0) {\n        parameters.transparent = true;\n      }\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n      if (materialNode.Specular) {\n        parameters.specular = new Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n        // The blender exporter exports specular color here instead of in materialNode.Specular\n        parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n      }\n      var scope = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n        switch (type) {\n          case 'Bump':\n            parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'Maya|TEX_ao_map':\n            parameters.aoMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'DiffuseColor':\n          case 'Maya|TEX_color_map':\n            parameters.map = scope.getTexture(textureMap, child.ID);\n            if (parameters.map !== undefined) {\n              parameters.map.encoding = sRGBEncoding;\n            }\n            break;\n          case 'DisplacementColor':\n            parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'EmissiveColor':\n            parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.emissiveMap !== undefined) {\n              parameters.emissiveMap.encoding = sRGBEncoding;\n            }\n            break;\n          case 'NormalMap':\n          case 'Maya|TEX_normal_map':\n            parameters.normalMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'ReflectionColor':\n            parameters.envMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.envMap !== undefined) {\n              parameters.envMap.mapping = EquirectangularReflectionMapping;\n              parameters.envMap.encoding = sRGBEncoding;\n            }\n            break;\n          case 'SpecularColor':\n            parameters.specularMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.specularMap !== undefined) {\n              parameters.specularMap.encoding = sRGBEncoding;\n            }\n            break;\n          case 'TransparentColor':\n          case 'TransparencyFactor':\n            parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n          case 'AmbientColor':\n          case 'ShininessExponent': // AKA glossiness map\n          case 'SpecularFactor': // AKA specularLevel\n          case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n          default:\n            console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n            break;\n        }\n      });\n      return parameters;\n    }\n\n    // get a texture from the textureMap for use by a material.\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(textureMap, id) {\n      // if the texture is a layered texture, just use the first layer and issue a warning\n      if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n        id = connections.get(id).children[0].ID;\n      }\n      return textureMap.get(id);\n    }\n\n    // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  }, {\n    key: \"parseDeformers\",\n    value: function parseDeformers() {\n      var skeletons = {};\n      var morphTargets = {};\n      if ('Deformer' in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n        for (var nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n          if (deformerNode.attrType === 'Skin') {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === 'BlendShape') {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    }\n\n    // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n  }, {\n    key: \"parseSkeleton\",\n    value: function parseSkeleton(relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== 'Cluster') return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new Matrix4().fromArray(boneNode.TransformLink.a)\n          // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n        };\n\n        if ('Indexes' in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    }\n\n    // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  }, {\n    key: \"parseMorphTargets\",\n    value: function parseMorphTargets(relationships, deformerNodes) {\n      var rawMorphTargets = [];\n      for (var i = 0; i < relationships.children.length; i++) {\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n          return child.relationship === undefined;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n      return rawMorphTargets;\n    }\n\n    // create the main Group() to be returned by the loader\n  }, {\n    key: \"parseScene\",\n    value: function parseScene(deformers, geometryMap, materialMap) {\n      sceneGraph = new Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var scope = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        scope.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== undefined) parent.add(model);\n        });\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) {\n            node.userData.transformData.parentMatrix = node.parent.matrix;\n            node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n          }\n          var transform = generateTransform(node.userData.transformData);\n          node.applyMatrix4(transform);\n          node.updateWorldMatrix();\n        }\n      });\n      var animations = new AnimationParser().parse();\n\n      // if all the models where already combined in a single group, just return that\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n      sceneGraph.animations = animations;\n    }\n\n    // parse nodes in FBXTree.Objects.Model\n  }, {\n    key: \"parseModels\",\n    value: function parseModels(skeletons, geometryMap, materialMap) {\n      var modelMap = new Map();\n      var modelNodes = fbxTree.Objects.Model;\n      for (var nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n        if (!model) {\n          switch (node.attrType) {\n            case 'Camera':\n              model = this.createCamera(relationships);\n              break;\n            case 'Light':\n              model = this.createLight(relationships);\n              break;\n            case 'Mesh':\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n            case 'NurbsCurve':\n              model = this.createCurve(relationships, geometryMap);\n              break;\n            case 'LimbNode':\n            case 'Root':\n              model = new Bone();\n              break;\n            case 'Null':\n            default:\n              model = new Group();\n              break;\n          }\n          model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n          model.ID = id;\n        }\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n      return modelMap;\n    }\n  }, {\n    key: \"buildSkeleton\",\n    value: function buildSkeleton(relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        var _loop = function _loop() {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new Bone();\n              bone.matrixWorld.copy(rawBone.transformLink);\n\n              // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n              bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n              bone.ID = id;\n              skeleton.bones[i] = bone;\n\n              // In cases where a bone is shared between multiple meshes\n              // duplicate the bone here and and it as a child of the first bone\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        };\n        for (var ID in skeletons) {\n          _loop();\n        }\n      });\n      return bone;\n    }\n\n    // create a PerspectiveCamera or OrthographicCamera\n  }, {\n    key: \"createCamera\",\n    value: function createCamera(relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== undefined) {\n          cameraAttribute = attr;\n        }\n      });\n      if (cameraAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type = 0;\n        if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n        var nearClippingPlane = 1;\n        if (cameraAttribute.NearPlane !== undefined) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n        }\n        var farClippingPlane = 1000;\n        if (cameraAttribute.FarPlane !== undefined) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n        }\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n        if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n        var aspect = width / height;\n        var fov = 45;\n        if (cameraAttribute.FieldOfView !== undefined) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n        switch (type) {\n          case 0:\n            // Perspective\n            model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n          case 1:\n            // Orthographic\n            model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n          default:\n            console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n            model = new Object3D();\n            break;\n        }\n      }\n      return model;\n    }\n\n    // Create a DirectionalLight, PointLight or SpotLight\n  }, {\n    key: \"createLight\",\n    value: function createLight(relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== undefined) {\n          lightAttribute = attr;\n        }\n      });\n      if (lightAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type;\n\n        // LightType can be undefined for Point lights\n        if (lightAttribute.LightType === undefined) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n        var color = 0xffffff;\n        if (lightAttribute.Color !== undefined) {\n          color = new Color().fromArray(lightAttribute.Color.value);\n        }\n        var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100;\n\n        // light disabled\n        if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n        var distance = 0;\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\n          if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        }\n\n        // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n        var decay = 1;\n        switch (type) {\n          case 0:\n            // Point\n            model = new PointLight(color, intensity, distance, decay);\n            break;\n          case 1:\n            // Directional\n            model = new DirectionalLight(color, intensity);\n            break;\n          case 2:\n            // Spot\n            var angle = Math.PI / 3;\n            if (lightAttribute.InnerAngle !== undefined) {\n              angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n            }\n            var penumbra = 0;\n            if (lightAttribute.OuterAngle !== undefined) {\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n              penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n            model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n          default:\n            console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n            model = new PointLight(color, intensity);\n            break;\n        }\n        if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n      return model;\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh(relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = [];\n\n      // get geometry and materials(s) from connections\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new MeshPhongMaterial({\n          color: 0xcccccc\n        });\n        materials.push(material);\n      }\n      if ('color' in geometry.attributes) {\n        materials.forEach(function (material) {\n          material.vertexColors = true;\n        });\n      }\n      if (geometry.FBX_Deformer) {\n        model = new SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new Mesh(geometry, material);\n      }\n      return model;\n    }\n  }, {\n    key: \"createCurve\",\n    value: function createCurve(relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null);\n\n      // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n      var material = new LineBasicMaterial({\n        color: 0x3300ff,\n        linewidth: 1\n      });\n      return new Line(geometry, material);\n    }\n\n    // parse the model node for transform data\n  }, {\n    key: \"getTransformData\",\n    value: function getTransformData(model, modelNode) {\n      var transformData = {};\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    }\n  }, {\n    key: \"setLookAtProperties\",\n    value: function setLookAtProperties(model, modelNode) {\n      if ('LookAtProperty' in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === 'LookAtProperty') {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n            if ('Lcl_Translation' in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value;\n\n              // DirectionalLight, SpotLight\n              if (model.target !== undefined) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n\n                model.lookAt(new Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"bindSkeleton\",\n    value: function bindSkeleton(skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n      var _loop2 = function _loop2() {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      };\n      for (var ID in skeletons) {\n        _loop2();\n      }\n    }\n  }, {\n    key: \"parsePoseNodes\",\n    value: function parsePoseNodes() {\n      var bindMatrices = {};\n      if ('Pose' in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n        for (var nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === 'BindPose' && BindPoseNode[nodeID].NbPoseNodes > 0) {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n      return bindMatrices;\n    }\n\n    // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n  }, {\n    key: \"createAmbientLight\",\n    value: function createAmbientLight() {\n      if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new Color(r, g, b);\n          sceneGraph.add(new AmbientLight(color, 1));\n        }\n      }\n    }\n  }]);\n  return FBXTreeParser;\n}(); // parse Geometry data from FBXTree and return map of BufferGeometries\nvar GeometryParser = /*#__PURE__*/function () {\n  function GeometryParser() {\n    _classCallCheck(this, GeometryParser);\n    this.negativeMaterialIndices = false;\n  }\n\n  // Parse nodes in FBXTree.Objects.Geometry\n  _createClass(GeometryParser, [{\n    key: \"parse\",\n    value: function parse(deformers) {\n      var geometryMap = new Map();\n      if ('Geometry' in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n        for (var nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n\n      // report warnings\n\n      if (this.negativeMaterialIndices === true) {\n        console.warn('THREE.FBXLoader: The FBX file contains invalid (negative) material indices. The asset might not render as expected.');\n      }\n      return geometryMap;\n    }\n\n    // Parse single node in FBXTree.Objects.Geometry\n  }, {\n    key: \"parseGeometry\",\n    value: function parseGeometry(relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case 'Mesh':\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n          break;\n        case 'NurbsCurve':\n          return this.parseNurbsGeometry(geoNode);\n          break;\n      }\n    }\n\n    // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  }, {\n    key: \"parseMeshGeometry\",\n    value: function parseMeshGeometry(relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = [];\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      });\n\n      // don't create geometry if it is not associated with any models\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton, child) {\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n        return skeleton;\n      }, null);\n      relationships.children.forEach(function (child) {\n        if (deformers.morphTargets[child.ID] !== undefined) {\n          morphTargets.push(deformers.morphTargets[child.ID]);\n        }\n      });\n\n      // Assume one model and get the preRotation from that\n      // if there is more than one model associated with the geometry this may cause problems\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n    }\n\n    // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  }, {\n    key: \"genGeometry\",\n    value: function genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n      var geo = new BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n      positionAttribute.applyMatrix4(preTransform);\n      geo.setAttribute('position', positionAttribute);\n      if (buffers.colors.length > 0) {\n        geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n      }\n      if (skeleton) {\n        geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4));\n\n        // used later to bind the skeleton to the model\n        geo.FBX_Deformer = skeleton;\n      }\n      if (buffers.normal.length > 0) {\n        var normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n        var normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n        normalAttribute.applyNormalMatrix(normalMatrix);\n        geo.setAttribute('normal', normalAttribute);\n      }\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\n        var name = 'uv' + (i + 1).toString();\n\n        // the first uv buffer is just called 'uv'\n        if (i === 0) {\n          name = 'uv';\n        }\n        geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        // Convert the material indices of each vertex into rendering groups on the geometry.\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        });\n\n        // the loop above doesn't add the last group, do that here.\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        }\n\n        // case where there are multiple materials but the whole geometry is only\n        // using one of them\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n      this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n      return geo;\n    }\n  }, {\n    key: \"parseGeoNode\",\n    value: function parseGeoNode(geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n        while (geoNode.LayerElementUV[i]) {\n          if (geoNode.LayerElementUV[i].UV) {\n            geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          }\n          i++;\n        }\n      }\n      geoInfo.weightTable = {};\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          // loop over the bone's vertex indices and weights\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n      return geoInfo;\n    }\n  }, {\n    key: \"genBuffers\",\n    value: function genBuffers(geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false;\n\n      // these will hold data for a single face\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var scope = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var materialIndex;\n        var endOfFace = false;\n\n        // Face index and vertex index arrays are combined in a single array\n        // A cube with quad faces looks like this:\n        // PolygonVertexIndex: *24 {\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n        //  }\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n        // to find index of last vertex bit shift the index: ^ - 1\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n          endOfFace = true;\n        }\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n              displayedWeightsWarning = true;\n            }\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          }\n\n          // if the weight array is shorter than 4 pad with 0s\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n          for (var i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n        if (geoInfo.normal) {\n          var _data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n          faceNormals.push(_data[0], _data[1], _data[2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n          if (materialIndex < 0) {\n            scope.negativeMaterialIndices = true;\n            materialIndex = 0; // fallback\n          }\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n            if (faceUVs[i] === undefined) {\n              faceUVs[i] = [];\n            }\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n        faceLength++;\n        if (endOfFace) {\n          if (faceLength > 4) console.warn('THREE.FBXLoader: Polygons with more than four sides are not supported. Make sure to triangulate the geometry during export.');\n          scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0;\n\n          // reset arrays for the next face\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    }\n\n    // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  }, {\n    key: \"genFace\",\n    value: function genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      var _loop3 = function _loop3(i) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      };\n      for (var i = 2; i < faceLength; i++) {\n        _loop3(i);\n      }\n    }\n  }, {\n    key: \"addMorphTargets\",\n    value: function addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n      if (morphTargets.length === 0) return;\n      parentGeo.morphTargetsRelative = true;\n      parentGeo.morphAttributes.position = [];\n      // parentGeo.morphAttributes.normal = []; // not implemented\n\n      var scope = this;\n      morphTargets.forEach(function (morphTarget) {\n        morphTarget.rawTargets.forEach(function (rawTarget) {\n          var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n          if (morphGeoNode !== undefined) {\n            scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n          }\n        });\n      });\n    }\n\n    // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n  }, {\n    key: \"genMorphGeometry\",\n    value: function genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n      var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n      var length = parentGeo.attributes.position.count * 3;\n      var morphPositions = new Float32Array(length);\n      for (var i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3;\n        morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n        morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n        morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n      }\n\n      // TODO: add morph normal support\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: morphPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      positionAttribute.applyMatrix4(preTransform);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    }\n\n    // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  }, {\n    key: \"parseNormals\",\n    value: function parseNormals(NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        if ('NormalIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if ('NormalsIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    }\n\n    // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  }, {\n    key: \"parseUVs\",\n    value: function parseUVs(UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    }\n\n    // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  }, {\n    key: \"parseVertexColors\",\n    value: function parseVertexColors(ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    }\n\n    // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  }, {\n    key: \"parseMaterialIndices\",\n    value: function parseMaterialIndices(MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n      if (mappingType === 'NoMappingInformation') {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: 'AllSame',\n          referenceType: referenceType\n        };\n      }\n      var materialIndexBuffer = MaterialNode.Materials.a;\n\n      // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\n      // for conforming with the other functions we've written for other data.\n      var materialIndices = [];\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    }\n\n    // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  }, {\n    key: \"parseNurbsGeometry\",\n    value: function parseNurbsGeometry(geoNode) {\n      if (NURBSCurve === undefined) {\n        console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n        return new BufferGeometry();\n      }\n      var order = parseInt(geoNode.Order);\n      if (isNaN(order)) {\n        console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n        return new BufferGeometry();\n      }\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n      for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new Vector4().fromArray(pointsValues, i));\n      }\n      var startKnot, endKnot;\n      if (geoNode.Form === 'Closed') {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === 'Periodic') {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n        for (var _i = 0; _i < degree; ++_i) {\n          controlPoints.push(controlPoints[_i]);\n        }\n      }\n      var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var points = curve.getPoints(controlPoints.length * 12);\n      return new BufferGeometry().setFromPoints(points);\n    }\n  }]);\n  return GeometryParser;\n}(); // parse animation data from FBXTree\nvar AnimationParser = /*#__PURE__*/function () {\n  function AnimationParser() {\n    _classCallCheck(this, AnimationParser);\n  }\n  _createClass(AnimationParser, [{\n    key: \"parse\",\n    value:\n    // take raw animation clips and turn them into three.js animation clips\n    function parse() {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n      if (rawClips !== undefined) {\n        for (var key in rawClips) {\n          var rawClip = rawClips[key];\n          var clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n      return animationClips;\n    }\n  }, {\n    key: \"parseClips\",\n    value: function parseClips() {\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n      // if this is undefined we can safely assume there are no animations\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    }\n\n    // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n  }, {\n    key: \"parseAnimationCurveNodes\",\n    value: function parseAnimationCurveNodes() {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = new Map();\n      for (var nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n      return curveNodesMap;\n    }\n\n    // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n  }, {\n    key: \"parseAnimationCurves\",\n    value: function parseAnimationCurves(curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve;\n\n      // TODO: Many values are identical up to roundoff error, but won't be optimised\n      // e.g. position times: [0, 0.4, 0. 8]\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n      // clearly, this should be optimised to\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n      // this shows up in nearly every FBX file, and generally time array is length > 100\n\n      for (var nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n        if (relationships !== undefined) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n          }\n        }\n      }\n    }\n\n    // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  }, {\n    key: \"parseAnimationLayers\",\n    value: function parseAnimationLayers(curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = new Map();\n      var _loop4 = function _loop4() {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n        if (connection !== undefined) {\n          // all the animationCurveNodes used in the layer\n          var children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID);\n\n              // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n              if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  if (modelID !== undefined) {\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\n                    if (rawModel === undefined) {\n                      console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                      return;\n                    }\n                    var node = {\n                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child) {\n                      if (child.ID === rawModel.id) {\n                        node.transform = child.matrix;\n                        if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new Matrix4();\n\n                    // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                    // animation value as well\n                    if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID;\n\n                  // assuming geometry is not used in more than one model\n                  var _modelID = connections.get(geoID).parents[0].ID;\n                  var _rawModel = fbxTree.Objects.Model[_modelID];\n                  var _node = {\n                    modelName: _rawModel.attrName ? PropertyBinding.sanitizeNodeName(_rawModel.attrName) : '',\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = _node;\n                }\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      };\n      for (var nodeID in rawLayers) {\n        _loop4();\n      }\n      return layersMap;\n    }\n\n    // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a AnimationClip\n  }, {\n    key: \"parseAnimStacks\",\n    value: function parseAnimStacks(layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack;\n\n      // connect the stacks (clips) up to the layers\n      var rawClips = {};\n      for (var nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n        if (children.length > 1) {\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\n          // where there are multiple layers per stack, we'll display a warning\n          console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n        }\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n      return rawClips;\n    }\n  }, {\n    key: \"addClip\",\n    value: function addClip(rawClip) {\n      var tracks = [];\n      var scope = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(scope.generateTracks(rawTracks));\n      });\n      return new AnimationClip(rawClip.name, -1, tracks);\n    }\n  }, {\n    key: \"generateTracks\",\n    value: function generateTracks(rawTracks) {\n      var tracks = [];\n      var initialPosition = new Vector3();\n      var initialRotation = new Quaternion();\n      var initialScale = new Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n      if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n        if (positionTrack !== undefined) tracks.push(positionTrack);\n      }\n      if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\n      }\n      if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\n      }\n      if (rawTracks.DeformPercent !== undefined) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== undefined) tracks.push(morphTrack);\n      }\n      return tracks;\n    }\n  }, {\n    key: \"generateVectorTrack\",\n    value: function generateVectorTrack(modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n    }\n  }, {\n    key: \"generateRotationTrack\",\n    value: function generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== undefined) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(MathUtils.degToRad);\n      }\n      if (curves.y !== undefined) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(MathUtils.degToRad);\n      }\n      if (curves.z !== undefined) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(MathUtils.degToRad);\n      }\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      if (preRotation !== undefined) {\n        preRotation = preRotation.map(MathUtils.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new Euler().fromArray(preRotation);\n        preRotation = new Quaternion().setFromEuler(preRotation);\n      }\n      if (postRotation !== undefined) {\n        postRotation = postRotation.map(MathUtils.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new Euler().fromArray(postRotation);\n        postRotation = new Quaternion().setFromEuler(postRotation).invert();\n      }\n      var quaternion = new Quaternion();\n      var euler = new Euler();\n      var quaternionValues = [];\n      for (var i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== undefined) quaternion.premultiply(preRotation);\n        if (postRotation !== undefined) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n      return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n    }\n  }, {\n    key: \"generateMorphTrack\",\n    value: function generateMorphTrack(rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n    }\n\n    // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n  }, {\n    key: \"getTimesForAllAxes\",\n    value: function getTimesForAllAxes(curves) {\n      var times = [];\n\n      // first join together the times for each axis, if defined\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\n      if (curves.z !== undefined) times = times.concat(curves.z.times);\n\n      // then sort them\n      times = times.sort(function (a, b) {\n        return a - b;\n      });\n\n      // and remove duplicates\n      if (times.length > 1) {\n        var targetIndex = 1;\n        var lastValue = times[0];\n        for (var i = 1; i < times.length; i++) {\n          var currentValue = times[i];\n          if (currentValue !== lastValue) {\n            times[targetIndex] = currentValue;\n            lastValue = currentValue;\n            targetIndex++;\n          }\n        }\n        times = times.slice(0, targetIndex);\n      }\n      return times;\n    }\n  }, {\n    key: \"getKeyframeTrackValues\",\n    value: function getKeyframeTrackValues(times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time);\n\n        // if there is an x value defined for this frame, use that\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          // otherwise use the x value from the previous frame\n          values.push(prevValue[0]);\n        }\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    }\n\n    // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n  }, {\n    key: \"interpolateRotations\",\n    value: function interpolateRotations(curve) {\n      for (var i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }]);\n  return AnimationParser;\n}(); // parse an FBX file in ASCII format\nvar TextParser = /*#__PURE__*/function () {\n  function TextParser() {\n    _classCallCheck(this, TextParser);\n  }\n  _createClass(TextParser, [{\n    key: \"getPrevNode\",\n    value: function getPrevNode() {\n      return this.nodeStack[this.currentIndent - 2];\n    }\n  }, {\n    key: \"getCurrentNode\",\n    value: function getCurrentNode() {\n      return this.nodeStack[this.currentIndent - 1];\n    }\n  }, {\n    key: \"getCurrentProp\",\n    value: function getCurrentProp() {\n      return this.currentProp;\n    }\n  }, {\n    key: \"pushStack\",\n    value: function pushStack(node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    }\n  }, {\n    key: \"popStack\",\n    value: function popStack() {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    }\n  }, {\n    key: \"setCurrentProp\",\n    value: function setCurrentProp(val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      var scope = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n        var matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        var matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n        if (matchBeginning) {\n          scope.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          scope.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          scope.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          // large arrays are split over multiple lines terminated with a ',' character\n          // if this is encountered the line needs to be joined to the previous line\n          scope.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    }\n  }, {\n    key: \"parseNodeBegin\",\n    value: function parseNodeBegin(line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n      var nodeAttrs = property[2].split(',').map(function (attr) {\n        return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode();\n\n      // a top node\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n\n        // if the subnode already exists, append it\n        if (nodeName in currentNode) {\n          // special case Pose needs PoseNodes as an array\n          if (nodeName === 'PoseNode') {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== undefined) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n          if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === 'number') {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== 'Properties70') {\n          if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n      if (typeof attrs.id === 'number') node.id = attrs.id;\n      if (attrs.name !== '') node.attrName = attrs.name;\n      if (attrs.type !== '') node.attrType = attrs.type;\n      this.pushStack(node);\n    }\n  }, {\n    key: \"parseNodeAttr\",\n    value: function parseNodeAttr(attrs) {\n      var id = attrs[0];\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n      var name = '',\n        type = '';\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    }\n  }, {\n    key: \"parseNodeProperty\",\n    value: function parseNodeProperty(line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n      var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim();\n\n      // for special case: base64 image data follows \"Content: ,\" line\n      //\tContent: ,\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\n      if (propName === 'Content' && propValue === ',') {\n        propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n      }\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n      if (parentName === 'Properties70') {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      }\n\n      // Connections\n      if (propName === 'C') {\n        var connProps = propValue.split(',').slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n        if (currentNode[propName] === undefined) {\n          currentNode[propName] = [];\n        }\n      }\n\n      // Node\n      if (propName === 'Node') currentNode.id = propValue;\n\n      // connections\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n      this.setCurrentProp(currentNode, propName);\n\n      // convert string to array, unless it ends in ',' in which case more will be added to it\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    }\n  }, {\n    key: \"parseNodePropertyContinued\",\n    value: function parseNodePropertyContinued(line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line;\n\n      // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n      if (line.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    }\n\n    // parse \"Property70\"\n  }, {\n    key: \"parseNodeSpecialProperty\",\n    value: function parseNodeSpecialProperty(line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4];\n\n      // cast values where needed, otherwise leave as strings\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n        case 'Color':\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      }\n\n      // CAUTION: these props must append to parent's parent\n      this.getPrevNode()[innerPropName] = {\n        'type': innerPropType1,\n        'type2': innerPropType2,\n        'flag': innerPropFlag,\n        'value': innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }]);\n  return TextParser;\n}(); // Parse an FBX file in Binary format\nvar BinaryParser = /*#__PURE__*/function () {\n  function BinaryParser() {\n    _classCallCheck(this, BinaryParser);\n  }\n  _createClass(BinaryParser, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      var version = reader.getUint32();\n      if (version < 6400) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n      }\n      var allNodes = new FBXTree();\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n      return allNodes;\n    }\n\n    // Check if reader has reached the end of content.\n  }, {\n    key: \"endOfContent\",\n    value: function endOfContent(reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    }\n\n    // recursively parse nodes until the end of the file is reached\n  }, {\n    key: \"parseNode\",\n    value: function parseNode(reader, version) {\n      var node = {};\n\n      // The first three data sizes depends on version.\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen);\n\n      // Regards this node as NULL-record if endOffset is zero\n      if (endOffset === 0) return null;\n      var propertyList = [];\n      for (var i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      }\n\n      // Regards the first three elements in propertyList as id, attrName, and attrType\n      var id = propertyList.length > 0 ? propertyList[0] : '';\n      var attrName = propertyList.length > 1 ? propertyList[1] : '';\n      var attrType = propertyList.length > 2 ? propertyList[2] : '';\n\n      // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n      node.propertyList = propertyList; // raw property list used by parent\n\n      if (typeof id === 'number') node.id = id;\n      if (attrName !== '') node.attrName = attrName;\n      if (attrType !== '') node.attrType = attrType;\n      if (name !== '') node.name = name;\n      return node;\n    }\n  }, {\n    key: \"parseSubNode\",\n    value: function parseSubNode(name, node, subNode) {\n      // special case: child node is single property\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === 'Connections' && subNode.name === 'C') {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\n          if (i !== 0) array.push(property);\n        });\n        if (node.connections === undefined) {\n          node.connections = [];\n        }\n        node.connections.push(array);\n      } else if (subNode.name === 'Properties70') {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === 'Properties70' && subNode.name === 'P') {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n        if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n        if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        }\n\n        // this will be copied to parent, see above\n        node[innerPropName] = {\n          'type': innerPropType1,\n          'type2': innerPropType2,\n          'flag': innerPropFlag,\n          'value': innerPropValue\n        };\n      } else if (node[subNode.name] === undefined) {\n        if (typeof subNode.id === 'number') {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === 'PoseNode') {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === undefined) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    }\n  }, {\n    key: \"parseProperty\",\n    value: function parseProperty(reader) {\n      var type = reader.getString(1);\n      var length;\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n        case 'D':\n          return reader.getFloat64();\n        case 'F':\n          return reader.getFloat32();\n        case 'I':\n          return reader.getInt32();\n        case 'L':\n          return reader.getInt64();\n        case 'R':\n          length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n        case 'S':\n          length = reader.getUint32();\n          return reader.getString(length);\n        case 'Y':\n          return reader.getInt16();\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n          var compressedLength = reader.getUint32();\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n          if (typeof fflate === 'undefined') {\n            console.error('THREE.FBXLoader: External library fflate.min.js required.');\n          }\n          var data = fflate.unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n          var reader2 = new BinaryReader(data.buffer);\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n          break;\n        // cannot happen but is required by the DeepScan\n\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  }]);\n  return BinaryParser;\n}();\nvar BinaryReader = /*#__PURE__*/function () {\n  function BinaryReader(buffer, littleEndian) {\n    _classCallCheck(this, BinaryReader);\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n  _createClass(BinaryReader, [{\n    key: \"getOffset\",\n    value: function getOffset() {\n      return this.offset;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.dv.buffer.byteLength;\n    }\n  }, {\n    key: \"skip\",\n    value: function skip(length) {\n      this.offset += length;\n    }\n\n    // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n  }, {\n    key: \"getBoolean\",\n    value: function getBoolean() {\n      return (this.getUint8() & 1) === 1;\n    }\n  }, {\n    key: \"getBooleanArray\",\n    value: function getBooleanArray(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n      return a;\n    }\n  }, {\n    key: \"getUint8\",\n    value: function getUint8() {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    }\n  }, {\n    key: \"getInt16\",\n    value: function getInt16() {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    }\n  }, {\n    key: \"getInt32\",\n    value: function getInt32() {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getInt32Array\",\n    value: function getInt32Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n      return a;\n    }\n  }, {\n    key: \"getUint32\",\n    value: function getUint32() {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n\n    // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n  }, {\n    key: \"getInt64\",\n    value: function getInt64() {\n      var low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n\n      // calculate negative value\n      if (high & 0x80000000) {\n        high = ~high & 0xFFFFFFFF;\n        low = ~low & 0xFFFFFFFF;\n        if (low === 0xFFFFFFFF) high = high + 1 & 0xFFFFFFFF;\n        low = low + 1 & 0xFFFFFFFF;\n        return -(high * 0x100000000 + low);\n      }\n      return high * 0x100000000 + low;\n    }\n  }, {\n    key: \"getInt64Array\",\n    value: function getInt64Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n      return a;\n    }\n\n    // Note: see getInt64() comment\n  }, {\n    key: \"getUint64\",\n    value: function getUint64() {\n      var low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n      return high * 0x100000000 + low;\n    }\n  }, {\n    key: \"getFloat32\",\n    value: function getFloat32() {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getFloat32Array\",\n    value: function getFloat32Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n      return a;\n    }\n  }, {\n    key: \"getFloat64\",\n    value: function getFloat64() {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    }\n  }, {\n    key: \"getFloat64Array\",\n    value: function getFloat64Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n      return a;\n    }\n  }, {\n    key: \"getArrayBuffer\",\n    value: function getArrayBuffer(size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(size) {\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  }]);\n  return BinaryReader;\n}(); // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\nvar FBXTree = /*#__PURE__*/function () {\n  function FBXTree() {\n    _classCallCheck(this, FBXTree);\n  }\n  _createClass(FBXTree, [{\n    key: \"add\",\n    value: function add(key, val) {\n      this[key] = val;\n    }\n  }]);\n  return FBXTree;\n}(); // ************** UTILITY FUNCTIONS **************\nfunction isFbxFormatBinary(buffer) {\n  var CORRECT = \"Kaydara FBX Binary  \\0\";\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  var cursor = 0;\n  function read(offset) {\n    var result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (var i = 0; i < CORRECT.length; ++i) {\n    var num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  var versionRegExp = /FBXVersion: (\\d+)/;\n  var match = text.match(versionRegExp);\n  if (match) {\n    var version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n}\n\n// Converts FBX ticks into real time seconds.\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\nvar dataArray = [];\n\n// extracts the data from the correct position in the FBX array based on indexing type\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  var index;\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  var from = index * infoObject.dataSize;\n  var to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nvar tempEuler = new Euler();\nvar tempVec = new Vector3();\n\n// generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\nfunction generateTransform(transformData) {\n  var lTranslationM = new Matrix4();\n  var lPreRotationM = new Matrix4();\n  var lRotationM = new Matrix4();\n  var lPostRotationM = new Matrix4();\n  var lScalingM = new Matrix4();\n  var lScalingPivotM = new Matrix4();\n  var lScalingOffsetM = new Matrix4();\n  var lRotationOffsetM = new Matrix4();\n  var lRotationPivotM = new Matrix4();\n  var lParentGX = new Matrix4();\n  var lParentLX = new Matrix4();\n  var lGlobalT = new Matrix4();\n  var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    var array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder || Euler.DefaultOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    var _array = transformData.rotation.map(MathUtils.degToRad);\n    _array.push(transformData.eulerOrder || Euler.DefaultOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(_array));\n  }\n  if (transformData.postRotation) {\n    var _array2 = transformData.postRotation.map(MathUtils.degToRad);\n    _array2.push(transformData.eulerOrder || Euler.DefaultOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(_array2));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale));\n\n  // Pivots and offsets\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n\n  // parent transform\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  var lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);\n  // Global Rotation\n  var lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX);\n\n  // Global Shear*Scaling\n  var lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  var lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  var lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  var lLSM = lScalingM;\n  var lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    var lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    var lParentLSM_inv = lParentLSM.clone().invert();\n    var lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  var lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  var lScalingPivotM_inv = lScalingPivotM.clone().invert();\n  // Calculate the local transform matrix\n  var lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  var lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  var lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS);\n\n  // from global to local\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n}\n\n// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\nfunction getEulerOrder(order) {\n  order = order || 0;\n  var enums = ['ZYX',\n  // -> XYZ extrinsic\n  'YZX',\n  // -> XZY extrinsic\n  'XZY',\n  // -> YZX extrinsic\n  'ZXY',\n  // -> YXZ extrinsic\n  'YXZ',\n  // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n  return enums[order];\n}\n\n// Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\nfunction parseNumberArray(value) {\n  var array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (var i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n}\n\n// inject array a2 into array a1 at index\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\nexport { FBXLoader };","map":{"version":3,"names":["AmbientLight","AnimationClip","Bone","BufferGeometry","ClampToEdgeWrapping","Color","DirectionalLight","EquirectangularReflectionMapping","Euler","FileLoader","Float32BufferAttribute","Group","Line","LineBasicMaterial","Loader","LoaderUtils","MathUtils","Matrix3","Matrix4","Mesh","MeshLambertMaterial","MeshPhongMaterial","NumberKeyframeTrack","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","PropertyBinding","Quaternion","QuaternionKeyframeTrack","RepeatWrapping","Skeleton","SkinnedMesh","SpotLight","Texture","TextureLoader","Uint16BufferAttribute","Vector3","Vector4","VectorKeyframeTrack","sRGBEncoding","fflate","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","Translation","offset","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","_loop","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","_loop2","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","negativeMaterialIndices","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","_loop3","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","_loop4","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","toArray","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","unzlibSync","reader2","littleEndian","dv","DataView","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","DefaultOrder","makeRotationFromEuler","lLRM","clone","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sources":["/Users/ewang/Documents/Github/ascii-renderer/node_modules/three/examples/jsm/loaders/FBXLoader.js"],"sourcesContent":["import {\n\tAmbientLight,\n\tAnimationClip,\n\tBone,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tDirectionalLight,\n\tEquirectangularReflectionMapping,\n\tEuler,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLine,\n\tLineBasicMaterial,\n\tLoader,\n\tLoaderUtils,\n\tMathUtils,\n\tMatrix3,\n\tMatrix4,\n\tMesh,\n\tMeshLambertMaterial,\n\tMeshPhongMaterial,\n\tNumberKeyframeTrack,\n\tObject3D,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPointLight,\n\tPropertyBinding,\n\tQuaternion,\n\tQuaternionKeyframeTrack,\n\tRepeatWrapping,\n\tSkeleton,\n\tSkinnedMesh,\n\tSpotLight,\n\tTexture,\n\tTextureLoader,\n\tUint16BufferAttribute,\n\tVector3,\n\tVector4,\n\tVectorKeyframeTrack,\n\tsRGBEncoding\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\n\nclass FBXLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( scope.path === '' ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( FBXBuffer, path ) {\n\n\t\tif ( isFbxFormatBinary( FBXBuffer ) ) {\n\n\t\t\tfbxTree = new BinaryParser().parse( FBXBuffer );\n\n\t\t} else {\n\n\t\t\tconst FBXText = convertArrayBufferToString( FBXBuffer );\n\n\t\t\tif ( ! isFbxFormatASCII( FBXText ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown format.' );\n\n\t\t\t}\n\n\t\t\tif ( getFbxVersion( FBXText ) < 7000 ) {\n\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );\n\n\t\t\t}\n\n\t\t\tfbxTree = new TextParser().parse( FBXText );\n\n\t\t}\n\n\t\t// console.log( fbxTree );\n\n\t\tconst textureLoader = new TextureLoader( this.manager ).setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\treturn new FBXTreeParser( textureLoader, this.manager ).parse( fbxTree );\n\n\t}\n\n}\n\n// Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\nclass FBXTreeParser {\n\n\tconstructor( textureLoader, manager ) {\n\n\t\tthis.textureLoader = textureLoader;\n\t\tthis.manager = manager;\n\n\t}\n\n\tparse() {\n\n\t\tconnections = this.parseConnections();\n\n\t\tconst images = this.parseImages();\n\t\tconst textures = this.parseTextures( images );\n\t\tconst materials = this.parseMaterials( textures );\n\t\tconst deformers = this.parseDeformers();\n\t\tconst geometryMap = new GeometryParser().parse( deformers );\n\n\t\tthis.parseScene( deformers, geometryMap, materials );\n\n\t\treturn sceneGraph;\n\n\t}\n\n\t// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n\t// and details the connection type\n\tparseConnections() {\n\n\t\tconst connectionMap = new Map();\n\n\t\tif ( 'Connections' in fbxTree ) {\n\n\t\t\tconst rawConnections = fbxTree.Connections.connections;\n\n\t\t\trawConnections.forEach( function ( rawConnection ) {\n\n\t\t\t\tconst fromID = rawConnection[ 0 ];\n\t\t\t\tconst toID = rawConnection[ 1 ];\n\t\t\t\tconst relationship = rawConnection[ 2 ];\n\n\t\t\t\tif ( ! connectionMap.has( fromID ) ) {\n\n\t\t\t\t\tconnectionMap.set( fromID, {\n\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tconst parentRelationship = { ID: toID, relationship: relationship };\n\t\t\t\tconnectionMap.get( fromID ).parents.push( parentRelationship );\n\n\t\t\t\tif ( ! connectionMap.has( toID ) ) {\n\n\t\t\t\t\tconnectionMap.set( toID, {\n\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tconst childRelationship = { ID: fromID, relationship: relationship };\n\t\t\t\tconnectionMap.get( toID ).children.push( childRelationship );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn connectionMap;\n\n\t}\n\n\t// Parse FBXTree.Objects.Video for embedded image data\n\t// These images are connected to textures in FBXTree.Objects.Textures\n\t// via FBXTree.Connections.\n\tparseImages() {\n\n\t\tconst images = {};\n\t\tconst blobs = {};\n\n\t\tif ( 'Video' in fbxTree.Objects ) {\n\n\t\t\tconst videoNodes = fbxTree.Objects.Video;\n\n\t\t\tfor ( const nodeID in videoNodes ) {\n\n\t\t\t\tconst videoNode = videoNodes[ nodeID ];\n\n\t\t\t\tconst id = parseInt( nodeID );\n\n\t\t\t\timages[ id ] = videoNode.RelativeFilename || videoNode.Filename;\n\n\t\t\t\t// raw image data is in videoNode.Content\n\t\t\t\tif ( 'Content' in videoNode ) {\n\n\t\t\t\t\tconst arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );\n\t\t\t\t\tconst base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );\n\n\t\t\t\t\tif ( arrayBufferContent || base64Content ) {\n\n\t\t\t\t\t\tconst image = this.parseImage( videoNodes[ nodeID ] );\n\n\t\t\t\t\t\tblobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( const id in images ) {\n\n\t\t\tconst filename = images[ id ];\n\n\t\t\tif ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];\n\t\t\telse images[ id ] = images[ id ].split( '\\\\' ).pop();\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\t// Parse embedded image data in FBXTree.Video.Content\n\tparseImage( videoNode ) {\n\n\t\tconst content = videoNode.Content;\n\t\tconst fileName = videoNode.RelativeFilename || videoNode.Filename;\n\t\tconst extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();\n\n\t\tlet type;\n\n\t\tswitch ( extension ) {\n\n\t\t\tcase 'bmp':\n\n\t\t\t\ttype = 'image/bmp';\n\t\t\t\tbreak;\n\n\t\t\tcase 'jpg':\n\t\t\tcase 'jpeg':\n\n\t\t\t\ttype = 'image/jpeg';\n\t\t\t\tbreak;\n\n\t\t\tcase 'png':\n\n\t\t\t\ttype = 'image/png';\n\t\t\t\tbreak;\n\n\t\t\tcase 'tif':\n\n\t\t\t\ttype = 'image/tiff';\n\t\t\t\tbreak;\n\n\t\t\tcase 'tga':\n\n\t\t\t\tif ( this.manager.getHandler( '.tga' ) === null ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, skipping ', fileName );\n\n\t\t\t\t}\n\n\t\t\t\ttype = 'image/tga';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'FBXLoader: Image type \"' + extension + '\" is not supported.' );\n\t\t\t\treturn;\n\n\t\t}\n\n\t\tif ( typeof content === 'string' ) { // ASCII format\n\n\t\t\treturn 'data:' + type + ';base64,' + content;\n\n\t\t} else { // Binary Format\n\n\t\t\tconst array = new Uint8Array( content );\n\t\t\treturn window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );\n\n\t\t}\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Texture\n\t// These contain details such as UV scaling, cropping, rotation etc and are connected\n\t// to images in FBXTree.Objects.Video\n\tparseTextures( images ) {\n\n\t\tconst textureMap = new Map();\n\n\t\tif ( 'Texture' in fbxTree.Objects ) {\n\n\t\t\tconst textureNodes = fbxTree.Objects.Texture;\n\t\t\tfor ( const nodeID in textureNodes ) {\n\n\t\t\t\tconst texture = this.parseTexture( textureNodes[ nodeID ], images );\n\t\t\t\ttextureMap.set( parseInt( nodeID ), texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textureMap;\n\n\t}\n\n\t// Parse individual node in FBXTree.Objects.Texture\n\tparseTexture( textureNode, images ) {\n\n\t\tconst texture = this.loadTexture( textureNode, images );\n\n\t\ttexture.ID = textureNode.id;\n\n\t\ttexture.name = textureNode.attrName;\n\n\t\tconst wrapModeU = textureNode.WrapModeU;\n\t\tconst wrapModeV = textureNode.WrapModeV;\n\n\t\tconst valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n\t\tconst valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n\t\t// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n\t\t// 0: repeat(default), 1: clamp\n\n\t\ttexture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\t\ttexture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n\t\tif ( 'Scaling' in textureNode ) {\n\n\t\t\tconst values = textureNode.Scaling.value;\n\n\t\t\ttexture.repeat.x = values[ 0 ];\n\t\t\ttexture.repeat.y = values[ 1 ];\n\n\t\t}\n\n\t\tif ( 'Translation' in textureNode ) {\n\n\t\t\tconst values = textureNode.Translation.value;\n\n\t\t\ttexture.offset.x = values[ 0 ];\n\t\t\ttexture.offset.y = values[ 1 ];\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\t// load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\tloadTexture( textureNode, images ) {\n\n\t\tlet fileName;\n\n\t\tconst currentPath = this.textureLoader.path;\n\n\t\tconst children = connections.get( textureNode.id ).children;\n\n\t\tif ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {\n\n\t\t\tfileName = images[ children[ 0 ].ID ];\n\n\t\t\tif ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\tthis.textureLoader.setPath( undefined );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet texture;\n\n\t\tconst extension = textureNode.FileName.slice( - 3 ).toLowerCase();\n\n\t\tif ( extension === 'tga' ) {\n\n\t\t\tconst loader = this.manager.getHandler( '.tga' );\n\n\t\t\tif ( loader === null ) {\n\n\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\t\ttexture = new Texture();\n\n\t\t\t} else {\n\n\t\t\t\tloader.setPath( this.textureLoader.path );\n\t\t\t\ttexture = loader.load( fileName );\n\n\t\t\t}\n\n\t\t} else if ( extension === 'psd' ) {\n\n\t\t\tconsole.warn( 'FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\ttexture = new Texture();\n\n\t\t} else {\n\n\t\t\ttexture = this.textureLoader.load( fileName );\n\n\t\t}\n\n\t\tthis.textureLoader.setPath( currentPath );\n\n\t\treturn texture;\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Material\n\tparseMaterials( textureMap ) {\n\n\t\tconst materialMap = new Map();\n\n\t\tif ( 'Material' in fbxTree.Objects ) {\n\n\t\t\tconst materialNodes = fbxTree.Objects.Material;\n\n\t\t\tfor ( const nodeID in materialNodes ) {\n\n\t\t\t\tconst material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\n\n\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materialMap;\n\n\t}\n\n\t// Parse single node in FBXTree.Objects.Material\n\t// Materials are connected to texture maps in FBXTree.Objects.Textures\n\t// FBX format currently only supports Lambert and Phong shading models\n\tparseMaterial( materialNode, textureMap ) {\n\n\t\tconst ID = materialNode.id;\n\t\tconst name = materialNode.attrName;\n\t\tlet type = materialNode.ShadingModel;\n\n\t\t// Case where FBX wraps shading model in property object.\n\t\tif ( typeof type === 'object' ) {\n\n\t\t\ttype = type.value;\n\n\t\t}\n\n\t\t// Ignore unused materials which don't have any connections.\n\t\tif ( ! connections.has( ID ) ) return null;\n\n\t\tconst parameters = this.parseParameters( materialNode, textureMap, ID );\n\n\t\tlet material;\n\n\t\tswitch ( type.toLowerCase() ) {\n\n\t\t\tcase 'phong':\n\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\tbreak;\n\t\t\tcase 'lambert':\n\t\t\t\tmaterial = new MeshLambertMaterial();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type );\n\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tmaterial.setValues( parameters );\n\t\tmaterial.name = name;\n\n\t\treturn material;\n\n\t}\n\n\t// Parse FBX material and return parameters suitable for a three.js material\n\t// Also parse the texture map and return any textures associated with the material\n\tparseParameters( materialNode, textureMap, ID ) {\n\n\t\tconst parameters = {};\n\n\t\tif ( materialNode.BumpFactor ) {\n\n\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Diffuse ) {\n\n\t\t\tparameters.color = new Color().fromArray( materialNode.Diffuse.value );\n\n\t\t} else if ( materialNode.DiffuseColor && ( materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB' ) ) {\n\n\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\n\t\t\tparameters.color = new Color().fromArray( materialNode.DiffuseColor.value );\n\n\t\t}\n\n\t\tif ( materialNode.DisplacementFactor ) {\n\n\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Emissive ) {\n\n\t\t\tparameters.emissive = new Color().fromArray( materialNode.Emissive.value );\n\n\t\t} else if ( materialNode.EmissiveColor && ( materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB' ) ) {\n\n\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\n\t\t\tparameters.emissive = new Color().fromArray( materialNode.EmissiveColor.value );\n\n\t\t}\n\n\t\tif ( materialNode.EmissiveFactor ) {\n\n\t\t\tparameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );\n\n\t\t}\n\n\t\tif ( materialNode.Opacity ) {\n\n\t\t\tparameters.opacity = parseFloat( materialNode.Opacity.value );\n\n\t\t}\n\n\t\tif ( parameters.opacity < 1.0 ) {\n\n\t\t\tparameters.transparent = true;\n\n\t\t}\n\n\t\tif ( materialNode.ReflectionFactor ) {\n\n\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Shininess ) {\n\n\t\t\tparameters.shininess = materialNode.Shininess.value;\n\n\t\t}\n\n\t\tif ( materialNode.Specular ) {\n\n\t\t\tparameters.specular = new Color().fromArray( materialNode.Specular.value );\n\n\t\t} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {\n\n\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\n\t\t\tparameters.specular = new Color().fromArray( materialNode.SpecularColor.value );\n\n\t\t}\n\n\t\tconst scope = this;\n\t\tconnections.get( ID ).children.forEach( function ( child ) {\n\n\t\t\tconst type = child.relationship;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'Bump':\n\t\t\t\t\tparameters.bumpMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Maya|TEX_ao_map':\n\t\t\t\t\tparameters.aoMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DiffuseColor':\n\t\t\t\tcase 'Maya|TEX_color_map':\n\t\t\t\t\tparameters.map = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.map !== undefined ) {\n\n\t\t\t\t\t\tparameters.map.encoding = sRGBEncoding;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DisplacementColor':\n\t\t\t\t\tparameters.displacementMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EmissiveColor':\n\t\t\t\t\tparameters.emissiveMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.emissiveMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.emissiveMap.encoding = sRGBEncoding;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'NormalMap':\n\t\t\t\tcase 'Maya|TEX_normal_map':\n\t\t\t\t\tparameters.normalMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ReflectionColor':\n\t\t\t\t\tparameters.envMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.envMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.envMap.mapping = EquirectangularReflectionMapping;\n\t\t\t\t\t\tparameters.envMap.encoding = sRGBEncoding;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpecularColor':\n\t\t\t\t\tparameters.specularMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.specularMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.specularMap.encoding = sRGBEncoding;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'TransparentColor':\n\t\t\t\tcase 'TransparencyFactor':\n\t\t\t\t\tparameters.alphaMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tparameters.transparent = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientColor':\n\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\n\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\n\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn parameters;\n\n\t}\n\n\t// get a texture from the textureMap for use by a material.\n\tgetTexture( textureMap, id ) {\n\n\t\t// if the texture is a layered texture, just use the first layer and issue a warning\n\t\tif ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {\n\n\t\t\tconsole.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );\n\t\t\tid = connections.get( id ).children[ 0 ].ID;\n\n\t\t}\n\n\t\treturn textureMap.get( id );\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Deformer\n\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n\t// Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\tparseDeformers() {\n\n\t\tconst skeletons = {};\n\t\tconst morphTargets = {};\n\n\t\tif ( 'Deformer' in fbxTree.Objects ) {\n\n\t\t\tconst DeformerNodes = fbxTree.Objects.Deformer;\n\n\t\t\tfor ( const nodeID in DeformerNodes ) {\n\n\t\t\t\tconst deformerNode = DeformerNodes[ nodeID ];\n\n\t\t\t\tconst relationships = connections.get( parseInt( nodeID ) );\n\n\t\t\t\tif ( deformerNode.attrType === 'Skin' ) {\n\n\t\t\t\t\tconst skeleton = this.parseSkeleton( relationships, DeformerNodes );\n\t\t\t\t\tskeleton.ID = nodeID;\n\n\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );\n\t\t\t\t\tskeleton.geometryID = relationships.parents[ 0 ].ID;\n\n\t\t\t\t\tskeletons[ nodeID ] = skeleton;\n\n\t\t\t\t} else if ( deformerNode.attrType === 'BlendShape' ) {\n\n\t\t\t\t\tconst morphTarget = {\n\t\t\t\t\t\tid: nodeID,\n\t\t\t\t\t};\n\n\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );\n\t\t\t\t\tmorphTarget.id = nodeID;\n\n\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );\n\n\t\t\t\t\tmorphTargets[ nodeID ] = morphTarget;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tskeletons: skeletons,\n\t\t\tmorphTargets: morphTargets,\n\n\t\t};\n\n\t}\n\n\t// Parse single nodes in FBXTree.Objects.Deformer\n\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n\t// Each skin node represents a skeleton and each cluster node represents a bone\n\tparseSkeleton( relationships, deformerNodes ) {\n\n\t\tconst rawBones = [];\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst boneNode = deformerNodes[ child.ID ];\n\n\t\t\tif ( boneNode.attrType !== 'Cluster' ) return;\n\n\t\t\tconst rawBone = {\n\n\t\t\t\tID: child.ID,\n\t\t\t\tindices: [],\n\t\t\t\tweights: [],\n\t\t\t\ttransformLink: new Matrix4().fromArray( boneNode.TransformLink.a ),\n\t\t\t\t// transform: new Matrix4().fromArray( boneNode.Transform.a ),\n\t\t\t\t// linkMode: boneNode.Mode,\n\n\t\t\t};\n\n\t\t\tif ( 'Indexes' in boneNode ) {\n\n\t\t\t\trawBone.indices = boneNode.Indexes.a;\n\t\t\t\trawBone.weights = boneNode.Weights.a;\n\n\t\t\t}\n\n\t\t\trawBones.push( rawBone );\n\n\t\t} );\n\n\t\treturn {\n\n\t\t\trawBones: rawBones,\n\t\t\tbones: []\n\n\t\t};\n\n\t}\n\n\t// The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\tparseMorphTargets( relationships, deformerNodes ) {\n\n\t\tconst rawMorphTargets = [];\n\n\t\tfor ( let i = 0; i < relationships.children.length; i ++ ) {\n\n\t\t\tconst child = relationships.children[ i ];\n\n\t\t\tconst morphTargetNode = deformerNodes[ child.ID ];\n\n\t\t\tconst rawMorphTarget = {\n\n\t\t\t\tname: morphTargetNode.attrName,\n\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\n\t\t\t\tid: morphTargetNode.id,\n\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\n\n\t\t\t};\n\n\t\t\tif ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;\n\n\t\t\trawMorphTarget.geoID = connections.get( parseInt( child.ID ) ).children.filter( function ( child ) {\n\n\t\t\t\treturn child.relationship === undefined;\n\n\t\t\t} )[ 0 ].ID;\n\n\t\t\trawMorphTargets.push( rawMorphTarget );\n\n\t\t}\n\n\t\treturn rawMorphTargets;\n\n\t}\n\n\t// create the main Group() to be returned by the loader\n\tparseScene( deformers, geometryMap, materialMap ) {\n\n\t\tsceneGraph = new Group();\n\n\t\tconst modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );\n\n\t\tconst modelNodes = fbxTree.Objects.Model;\n\n\t\tconst scope = this;\n\t\tmodelMap.forEach( function ( model ) {\n\n\t\t\tconst modelNode = modelNodes[ model.ID ];\n\t\t\tscope.setLookAtProperties( model, modelNode );\n\n\t\t\tconst parentConnections = connections.get( model.ID ).parents;\n\n\t\t\tparentConnections.forEach( function ( connection ) {\n\n\t\t\t\tconst parent = modelMap.get( connection.ID );\n\t\t\t\tif ( parent !== undefined ) parent.add( model );\n\n\t\t\t} );\n\n\t\t\tif ( model.parent === null ) {\n\n\t\t\t\tsceneGraph.add( model );\n\n\t\t\t}\n\n\n\t\t} );\n\n\t\tthis.bindSkeleton( deformers.skeletons, geometryMap, modelMap );\n\n\t\tthis.createAmbientLight();\n\n\t\tsceneGraph.traverse( function ( node ) {\n\n\t\t\tif ( node.userData.transformData ) {\n\n\t\t\t\tif ( node.parent ) {\n\n\t\t\t\t\tnode.userData.transformData.parentMatrix = node.parent.matrix;\n\t\t\t\t\tnode.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n\n\t\t\t\t}\n\n\t\t\t\tconst transform = generateTransform( node.userData.transformData );\n\n\t\t\t\tnode.applyMatrix4( transform );\n\t\t\t\tnode.updateWorldMatrix();\n\n\t\t\t}\n\n\t\t} );\n\n\t\tconst animations = new AnimationParser().parse();\n\n\t\t// if all the models where already combined in a single group, just return that\n\t\tif ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {\n\n\t\t\tsceneGraph.children[ 0 ].animations = animations;\n\t\t\tsceneGraph = sceneGraph.children[ 0 ];\n\n\t\t}\n\n\t\tsceneGraph.animations = animations;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.Model\n\tparseModels( skeletons, geometryMap, materialMap ) {\n\n\t\tconst modelMap = new Map();\n\t\tconst modelNodes = fbxTree.Objects.Model;\n\n\t\tfor ( const nodeID in modelNodes ) {\n\n\t\t\tconst id = parseInt( nodeID );\n\t\t\tconst node = modelNodes[ nodeID ];\n\t\t\tconst relationships = connections.get( id );\n\n\t\t\tlet model = this.buildSkeleton( relationships, skeletons, id, node.attrName );\n\n\t\t\tif ( ! model ) {\n\n\t\t\t\tswitch ( node.attrType ) {\n\n\t\t\t\t\tcase 'Camera':\n\t\t\t\t\t\tmodel = this.createCamera( relationships );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Light':\n\t\t\t\t\t\tmodel = this.createLight( relationships );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\tmodel = this.createMesh( relationships, geometryMap, materialMap );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\tmodel = this.createCurve( relationships, geometryMap );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'LimbNode':\n\t\t\t\t\tcase 'Root':\n\t\t\t\t\t\tmodel = new Bone();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Null':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmodel = new Group();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tmodel.name = node.attrName ? PropertyBinding.sanitizeNodeName( node.attrName ) : '';\n\n\t\t\t\tmodel.ID = id;\n\n\t\t\t}\n\n\t\t\tthis.getTransformData( model, node );\n\t\t\tmodelMap.set( id, model );\n\n\t\t}\n\n\t\treturn modelMap;\n\n\t}\n\n\tbuildSkeleton( relationships, skeletons, id, name ) {\n\n\t\tlet bone = null;\n\n\t\trelationships.parents.forEach( function ( parent ) {\n\n\t\t\tfor ( const ID in skeletons ) {\n\n\t\t\t\tconst skeleton = skeletons[ ID ];\n\n\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\tif ( rawBone.ID === parent.ID ) {\n\n\t\t\t\t\t\tconst subBone = bone;\n\t\t\t\t\t\tbone = new Bone();\n\n\t\t\t\t\t\tbone.matrixWorld.copy( rawBone.transformLink );\n\n\t\t\t\t\t\t// set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n\t\t\t\t\t\tbone.name = name ? PropertyBinding.sanitizeNodeName( name ) : '';\n\t\t\t\t\t\tbone.ID = id;\n\n\t\t\t\t\t\tskeleton.bones[ i ] = bone;\n\n\t\t\t\t\t\t// In cases where a bone is shared between multiple meshes\n\t\t\t\t\t\t// duplicate the bone here and and it as a child of the first bone\n\t\t\t\t\t\tif ( subBone !== null ) {\n\n\t\t\t\t\t\t\tbone.add( subBone );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn bone;\n\n\t}\n\n\t// create a PerspectiveCamera or OrthographicCamera\n\tcreateCamera( relationships ) {\n\n\t\tlet model;\n\t\tlet cameraAttribute;\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\tcameraAttribute = attr;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( cameraAttribute === undefined ) {\n\n\t\t\tmodel = new Object3D();\n\n\t\t} else {\n\n\t\t\tlet type = 0;\n\t\t\tif ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {\n\n\t\t\t\ttype = 1;\n\n\t\t\t}\n\n\t\t\tlet nearClippingPlane = 1;\n\t\t\tif ( cameraAttribute.NearPlane !== undefined ) {\n\n\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n\n\t\t\t}\n\n\t\t\tlet farClippingPlane = 1000;\n\t\t\tif ( cameraAttribute.FarPlane !== undefined ) {\n\n\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\n\n\t\t\t}\n\n\n\t\t\tlet width = window.innerWidth;\n\t\t\tlet height = window.innerHeight;\n\n\t\t\tif ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {\n\n\t\t\t\twidth = cameraAttribute.AspectWidth.value;\n\t\t\t\theight = cameraAttribute.AspectHeight.value;\n\n\t\t\t}\n\n\t\t\tconst aspect = width / height;\n\n\t\t\tlet fov = 45;\n\t\t\tif ( cameraAttribute.FieldOfView !== undefined ) {\n\n\t\t\t\tfov = cameraAttribute.FieldOfView.value;\n\n\t\t\t}\n\n\t\t\tconst focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0: // Perspective\n\t\t\t\t\tmodel = new PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );\n\t\t\t\t\tif ( focalLength !== null ) model.setFocalLength( focalLength );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1: // Orthographic\n\t\t\t\t\tmodel = new OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );\n\t\t\t\t\tmodel = new Object3D();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\t// Create a DirectionalLight, PointLight or SpotLight\n\tcreateLight( relationships ) {\n\n\t\tlet model;\n\t\tlet lightAttribute;\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\tlightAttribute = attr;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( lightAttribute === undefined ) {\n\n\t\t\tmodel = new Object3D();\n\n\t\t} else {\n\n\t\t\tlet type;\n\n\t\t\t// LightType can be undefined for Point lights\n\t\t\tif ( lightAttribute.LightType === undefined ) {\n\n\t\t\t\ttype = 0;\n\n\t\t\t} else {\n\n\t\t\t\ttype = lightAttribute.LightType.value;\n\n\t\t\t}\n\n\t\t\tlet color = 0xffffff;\n\n\t\t\tif ( lightAttribute.Color !== undefined ) {\n\n\t\t\t\tcolor = new Color().fromArray( lightAttribute.Color.value );\n\n\t\t\t}\n\n\t\t\tlet intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;\n\n\t\t\t// light disabled\n\t\t\tif ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {\n\n\t\t\t\tintensity = 0;\n\n\t\t\t}\n\n\t\t\tlet distance = 0;\n\t\t\tif ( lightAttribute.FarAttenuationEnd !== undefined ) {\n\n\t\t\t\tif ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {\n\n\t\t\t\t\tdistance = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\t\t\tconst decay = 1;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0: // Point\n\t\t\t\t\tmodel = new PointLight( color, intensity, distance, decay );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1: // Directional\n\t\t\t\t\tmodel = new DirectionalLight( color, intensity );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // Spot\n\t\t\t\t\tlet angle = Math.PI / 3;\n\n\t\t\t\t\tif ( lightAttribute.InnerAngle !== undefined ) {\n\n\t\t\t\t\t\tangle = MathUtils.degToRad( lightAttribute.InnerAngle.value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet penumbra = 0;\n\t\t\t\t\tif ( lightAttribute.OuterAngle !== undefined ) {\n\n\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\n\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n\t\t\t\t\t\tpenumbra = MathUtils.degToRad( lightAttribute.OuterAngle.value );\n\t\t\t\t\t\tpenumbra = Math.max( penumbra, 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel = new SpotLight( color, intensity, distance, angle, penumbra, decay );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.' );\n\t\t\t\t\tmodel = new PointLight( color, intensity );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {\n\n\t\t\t\tmodel.castShadow = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\tcreateMesh( relationships, geometryMap, materialMap ) {\n\n\t\tlet model;\n\t\tlet geometry = null;\n\t\tlet material = null;\n\t\tconst materials = [];\n\n\t\t// get geometry and materials(s) from connections\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tif ( geometryMap.has( child.ID ) ) {\n\n\t\t\t\tgeometry = geometryMap.get( child.ID );\n\n\t\t\t}\n\n\t\t\tif ( materialMap.has( child.ID ) ) {\n\n\t\t\t\tmaterials.push( materialMap.get( child.ID ) );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( materials.length > 1 ) {\n\n\t\t\tmaterial = materials;\n\n\t\t} else if ( materials.length > 0 ) {\n\n\t\t\tmaterial = materials[ 0 ];\n\n\t\t} else {\n\n\t\t\tmaterial = new MeshPhongMaterial( { color: 0xcccccc } );\n\t\t\tmaterials.push( material );\n\n\t\t}\n\n\t\tif ( 'color' in geometry.attributes ) {\n\n\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( geometry.FBX_Deformer ) {\n\n\t\t\tmodel = new SkinnedMesh( geometry, material );\n\t\t\tmodel.normalizeSkinWeights();\n\n\t\t} else {\n\n\t\t\tmodel = new Mesh( geometry, material );\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\tcreateCurve( relationships, geometryMap ) {\n\n\t\tconst geometry = relationships.children.reduce( function ( geo, child ) {\n\n\t\t\tif ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );\n\n\t\t\treturn geo;\n\n\t\t}, null );\n\n\t\t// FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\t\tconst material = new LineBasicMaterial( { color: 0x3300ff, linewidth: 1 } );\n\t\treturn new Line( geometry, material );\n\n\t}\n\n\t// parse the model node for transform data\n\tgetTransformData( model, modelNode ) {\n\n\t\tconst transformData = {};\n\n\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\telse transformData.eulerOrder = 'ZYX';\n\n\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\n\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\n\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\tif ( 'ScalingOffset' in modelNode ) transformData.scalingOffset = modelNode.ScalingOffset.value;\n\t\tif ( 'ScalingPivot' in modelNode ) transformData.scalingPivot = modelNode.ScalingPivot.value;\n\n\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\t\tif ( 'RotationPivot' in modelNode ) transformData.rotationPivot = modelNode.RotationPivot.value;\n\n\t\tmodel.userData.transformData = transformData;\n\n\t}\n\n\tsetLookAtProperties( model, modelNode ) {\n\n\t\tif ( 'LookAtProperty' in modelNode ) {\n\n\t\t\tconst children = connections.get( model.ID ).children;\n\n\t\t\tchildren.forEach( function ( child ) {\n\n\t\t\t\tif ( child.relationship === 'LookAtProperty' ) {\n\n\t\t\t\t\tconst lookAtTarget = fbxTree.Objects.Model[ child.ID ];\n\n\t\t\t\t\tif ( 'Lcl_Translation' in lookAtTarget ) {\n\n\t\t\t\t\t\tconst pos = lookAtTarget.Lcl_Translation.value;\n\n\t\t\t\t\t\t// DirectionalLight, SpotLight\n\t\t\t\t\t\tif ( model.target !== undefined ) {\n\n\t\t\t\t\t\t\tmodel.target.position.fromArray( pos );\n\t\t\t\t\t\t\tsceneGraph.add( model.target );\n\n\t\t\t\t\t\t} else { // Cameras and other Object3Ds\n\n\t\t\t\t\t\t\tmodel.lookAt( new Vector3().fromArray( pos ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tbindSkeleton( skeletons, geometryMap, modelMap ) {\n\n\t\tconst bindMatrices = this.parsePoseNodes();\n\n\t\tfor ( const ID in skeletons ) {\n\n\t\t\tconst skeleton = skeletons[ ID ];\n\n\t\t\tconst parents = connections.get( parseInt( skeleton.ID ) ).parents;\n\n\t\t\tparents.forEach( function ( parent ) {\n\n\t\t\t\tif ( geometryMap.has( parent.ID ) ) {\n\n\t\t\t\t\tconst geoID = parent.ID;\n\t\t\t\t\tconst geoRelationships = connections.get( geoID );\n\n\t\t\t\t\tgeoRelationships.parents.forEach( function ( geoConnParent ) {\n\n\t\t\t\t\t\tif ( modelMap.has( geoConnParent.ID ) ) {\n\n\t\t\t\t\t\t\tconst model = modelMap.get( geoConnParent.ID );\n\n\t\t\t\t\t\t\tmodel.bind( new Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tparsePoseNodes() {\n\n\t\tconst bindMatrices = {};\n\n\t\tif ( 'Pose' in fbxTree.Objects ) {\n\n\t\t\tconst BindPoseNode = fbxTree.Objects.Pose;\n\n\t\t\tfor ( const nodeID in BindPoseNode ) {\n\n\t\t\t\tif ( BindPoseNode[ nodeID ].attrType === 'BindPose' && BindPoseNode[ nodeID ].NbPoseNodes > 0 ) {\n\n\t\t\t\t\tconst poseNodes = BindPoseNode[ nodeID ].PoseNode;\n\n\t\t\t\t\tif ( Array.isArray( poseNodes ) ) {\n\n\t\t\t\t\t\tposeNodes.forEach( function ( poseNode ) {\n\n\t\t\t\t\t\t\tbindMatrices[ poseNode.Node ] = new Matrix4().fromArray( poseNode.Matrix.a );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbindMatrices[ poseNodes.Node ] = new Matrix4().fromArray( poseNodes.Matrix.a );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bindMatrices;\n\n\t}\n\n\t// Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\tcreateAmbientLight() {\n\n\t\tif ( 'GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings ) {\n\n\t\t\tconst ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n\t\t\tconst r = ambientColor[ 0 ];\n\t\t\tconst g = ambientColor[ 1 ];\n\t\t\tconst b = ambientColor[ 2 ];\n\n\t\t\tif ( r !== 0 || g !== 0 || b !== 0 ) {\n\n\t\t\t\tconst color = new Color( r, g, b );\n\t\t\t\tsceneGraph.add( new AmbientLight( color, 1 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n// parse Geometry data from FBXTree and return map of BufferGeometries\nclass GeometryParser {\n\n\tconstructor() {\n\n\t\tthis.negativeMaterialIndices = false;\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Geometry\n\tparse( deformers ) {\n\n\t\tconst geometryMap = new Map();\n\n\t\tif ( 'Geometry' in fbxTree.Objects ) {\n\n\t\t\tconst geoNodes = fbxTree.Objects.Geometry;\n\n\t\t\tfor ( const nodeID in geoNodes ) {\n\n\t\t\t\tconst relationships = connections.get( parseInt( nodeID ) );\n\t\t\t\tconst geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );\n\n\t\t\t\tgeometryMap.set( parseInt( nodeID ), geo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// report warnings\n\n\t\tif ( this.negativeMaterialIndices === true ) {\n\n\t\t\tconsole.warn( 'THREE.FBXLoader: The FBX file contains invalid (negative) material indices. The asset might not render as expected.' );\n\n\t\t}\n\n\t\treturn geometryMap;\n\n\t}\n\n\t// Parse single node in FBXTree.Objects.Geometry\n\tparseGeometry( relationships, geoNode, deformers ) {\n\n\t\tswitch ( geoNode.attrType ) {\n\n\t\t\tcase 'Mesh':\n\t\t\t\treturn this.parseMeshGeometry( relationships, geoNode, deformers );\n\t\t\t\tbreak;\n\n\t\t\tcase 'NurbsCurve':\n\t\t\t\treturn this.parseNurbsGeometry( geoNode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t// Parse single node mesh geometry in FBXTree.Objects.Geometry\n\tparseMeshGeometry( relationships, geoNode, deformers ) {\n\n\t\tconst skeletons = deformers.skeletons;\n\t\tconst morphTargets = [];\n\n\t\tconst modelNodes = relationships.parents.map( function ( parent ) {\n\n\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\n\n\t\t} );\n\n\t\t// don't create geometry if it is not associated with any models\n\t\tif ( modelNodes.length === 0 ) return;\n\n\t\tconst skeleton = relationships.children.reduce( function ( skeleton, child ) {\n\n\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\n\n\t\t\treturn skeleton;\n\n\t\t}, null );\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tif ( deformers.morphTargets[ child.ID ] !== undefined ) {\n\n\t\t\t\tmorphTargets.push( deformers.morphTargets[ child.ID ] );\n\n\t\t\t}\n\n\t\t} );\n\n\t\t// Assume one model and get the preRotation from that\n\t\t// if there is more than one model associated with the geometry this may cause problems\n\t\tconst modelNode = modelNodes[ 0 ];\n\n\t\tconst transformData = {};\n\n\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\n\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\n\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\n\n\t\tconst transform = generateTransform( transformData );\n\n\t\treturn this.genGeometry( geoNode, skeleton, morphTargets, transform );\n\n\t}\n\n\t// Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\tgenGeometry( geoNode, skeleton, morphTargets, preTransform ) {\n\n\t\tconst geo = new BufferGeometry();\n\t\tif ( geoNode.attrName ) geo.name = geoNode.attrName;\n\n\t\tconst geoInfo = this.parseGeoNode( geoNode, skeleton );\n\t\tconst buffers = this.genBuffers( geoInfo );\n\n\t\tconst positionAttribute = new Float32BufferAttribute( buffers.vertex, 3 );\n\n\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\tgeo.setAttribute( 'position', positionAttribute );\n\n\t\tif ( buffers.colors.length > 0 ) {\n\n\t\t\tgeo.setAttribute( 'color', new Float32BufferAttribute( buffers.colors, 3 ) );\n\n\t\t}\n\n\t\tif ( skeleton ) {\n\n\t\t\tgeo.setAttribute( 'skinIndex', new Uint16BufferAttribute( buffers.weightsIndices, 4 ) );\n\n\t\t\tgeo.setAttribute( 'skinWeight', new Float32BufferAttribute( buffers.vertexWeights, 4 ) );\n\n\t\t\t// used later to bind the skeleton to the model\n\t\t\tgeo.FBX_Deformer = skeleton;\n\n\t\t}\n\n\t\tif ( buffers.normal.length > 0 ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( preTransform );\n\n\t\t\tconst normalAttribute = new Float32BufferAttribute( buffers.normal, 3 );\n\t\t\tnormalAttribute.applyNormalMatrix( normalMatrix );\n\n\t\t\tgeo.setAttribute( 'normal', normalAttribute );\n\n\t\t}\n\n\t\tbuffers.uvs.forEach( function ( uvBuffer, i ) {\n\n\t\t\t// subsequent uv buffers are called 'uv1', 'uv2', ...\n\t\t\tlet name = 'uv' + ( i + 1 ).toString();\n\n\t\t\t// the first uv buffer is just called 'uv'\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tname = 'uv';\n\n\t\t\t}\n\n\t\t\tgeo.setAttribute( name, new Float32BufferAttribute( buffers.uvs[ i ], 2 ) );\n\n\t\t} );\n\n\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\n\t\t\tlet prevMaterialIndex = buffers.materialIndex[ 0 ];\n\t\t\tlet startIndex = 0;\n\n\t\t\tbuffers.materialIndex.forEach( function ( currentIndex, i ) {\n\n\t\t\t\tif ( currentIndex !== prevMaterialIndex ) {\n\n\t\t\t\t\tgeo.addGroup( startIndex, i - startIndex, prevMaterialIndex );\n\n\t\t\t\t\tprevMaterialIndex = currentIndex;\n\t\t\t\t\tstartIndex = i;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\t// the loop above doesn't add the last group, do that here.\n\t\t\tif ( geo.groups.length > 0 ) {\n\n\t\t\t\tconst lastGroup = geo.groups[ geo.groups.length - 1 ];\n\t\t\t\tconst lastIndex = lastGroup.start + lastGroup.count;\n\n\t\t\t\tif ( lastIndex !== buffers.materialIndex.length ) {\n\n\t\t\t\t\tgeo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// case where there are multiple materials but the whole geometry is only\n\t\t\t// using one of them\n\t\t\tif ( geo.groups.length === 0 ) {\n\n\t\t\t\tgeo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.addMorphTargets( geo, geoNode, morphTargets, preTransform );\n\n\t\treturn geo;\n\n\t}\n\n\tparseGeoNode( geoNode, skeleton ) {\n\n\t\tconst geoInfo = {};\n\n\t\tgeoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];\n\t\tgeoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];\n\n\t\tif ( geoNode.LayerElementColor ) {\n\n\t\t\tgeoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementMaterial ) {\n\n\t\t\tgeoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementNormal ) {\n\n\t\t\tgeoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementUV ) {\n\n\t\t\tgeoInfo.uv = [];\n\n\t\t\tlet i = 0;\n\t\t\twhile ( geoNode.LayerElementUV[ i ] ) {\n\n\t\t\t\tif ( geoNode.LayerElementUV[ i ].UV ) {\n\n\t\t\t\t\tgeoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeoInfo.weightTable = {};\n\n\t\tif ( skeleton !== null ) {\n\n\t\t\tgeoInfo.skeleton = skeleton;\n\n\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t// loop over the bone's vertex indices and weights\n\t\t\t\trawBone.indices.forEach( function ( index, j ) {\n\n\t\t\t\t\tif ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];\n\n\t\t\t\t\tgeoInfo.weightTable[ index ].push( {\n\n\t\t\t\t\t\tid: i,\n\t\t\t\t\t\tweight: rawBone.weights[ j ],\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn geoInfo;\n\n\t}\n\n\tgenBuffers( geoInfo ) {\n\n\t\tconst buffers = {\n\t\t\tvertex: [],\n\t\t\tnormal: [],\n\t\t\tcolors: [],\n\t\t\tuvs: [],\n\t\t\tmaterialIndex: [],\n\t\t\tvertexWeights: [],\n\t\t\tweightsIndices: [],\n\t\t};\n\n\t\tlet polygonIndex = 0;\n\t\tlet faceLength = 0;\n\t\tlet displayedWeightsWarning = false;\n\n\t\t// these will hold data for a single face\n\t\tlet facePositionIndexes = [];\n\t\tlet faceNormals = [];\n\t\tlet faceColors = [];\n\t\tlet faceUVs = [];\n\t\tlet faceWeights = [];\n\t\tlet faceWeightIndices = [];\n\n\t\tconst scope = this;\n\t\tgeoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {\n\n\t\t\tlet materialIndex;\n\t\t\tlet endOfFace = false;\n\n\t\t\t// Face index and vertex index arrays are combined in a single array\n\t\t\t// A cube with quad faces looks like this:\n\t\t\t// PolygonVertexIndex: *24 {\n\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n\t\t\t//  }\n\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n\t\t\t// to find index of last vertex bit shift the index: ^ - 1\n\t\t\tif ( vertexIndex < 0 ) {\n\n\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\n\t\t\t\tendOfFace = true;\n\n\t\t\t}\n\n\t\t\tlet weightIndices = [];\n\t\t\tlet weights = [];\n\n\t\t\tfacePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );\n\n\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );\n\n\t\t\t\tfaceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\tif ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {\n\n\t\t\t\t\tgeoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {\n\n\t\t\t\t\t\tweights.push( wt.weight );\n\t\t\t\t\t\tweightIndices.push( wt.id );\n\n\t\t\t\t\t} );\n\n\n\t\t\t\t}\n\n\t\t\t\tif ( weights.length > 4 ) {\n\n\t\t\t\t\tif ( ! displayedWeightsWarning ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );\n\t\t\t\t\t\tdisplayedWeightsWarning = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst wIndex = [ 0, 0, 0, 0 ];\n\t\t\t\t\tconst Weight = [ 0, 0, 0, 0 ];\n\n\t\t\t\t\tweights.forEach( function ( weight, weightIndex ) {\n\n\t\t\t\t\t\tlet currentWeight = weight;\n\t\t\t\t\t\tlet currentIndex = weightIndices[ weightIndex ];\n\n\t\t\t\t\t\tWeight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {\n\n\t\t\t\t\t\t\tif ( currentWeight > comparedWeight ) {\n\n\t\t\t\t\t\t\t\tcomparedWeightArray[ comparedWeightIndex ] = currentWeight;\n\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\n\n\t\t\t\t\t\t\t\tconst tmp = wIndex[ comparedWeightIndex ];\n\t\t\t\t\t\t\t\twIndex[ comparedWeightIndex ] = currentIndex;\n\t\t\t\t\t\t\t\tcurrentIndex = tmp;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tweightIndices = wIndex;\n\t\t\t\t\tweights = Weight;\n\n\t\t\t\t}\n\n\t\t\t\t// if the weight array is shorter than 4 pad with 0s\n\t\t\t\twhile ( weights.length < 4 ) {\n\n\t\t\t\t\tweights.push( 0 );\n\t\t\t\t\tweightIndices.push( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\tfaceWeights.push( weights[ i ] );\n\t\t\t\t\tfaceWeightIndices.push( weightIndices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );\n\n\t\t\t\tfaceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\tmaterialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];\n\n\t\t\t\tif ( materialIndex < 0 ) {\n\n\t\t\t\t\tscope.negativeMaterialIndices = true;\n\t\t\t\t\tmaterialIndex = 0; // fallback\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\tgeoInfo.uv.forEach( function ( uv, i ) {\n\n\t\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );\n\n\t\t\t\t\tif ( faceUVs[ i ] === undefined ) {\n\n\t\t\t\t\t\tfaceUVs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceUVs[ i ].push( data[ 0 ] );\n\t\t\t\t\tfaceUVs[ i ].push( data[ 1 ] );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tfaceLength ++;\n\n\t\t\tif ( endOfFace ) {\n\n\t\t\t\tif ( faceLength > 4 ) console.warn( 'THREE.FBXLoader: Polygons with more than four sides are not supported. Make sure to triangulate the geometry during export.' );\n\n\t\t\t\tscope.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );\n\n\t\t\t\tpolygonIndex ++;\n\t\t\t\tfaceLength = 0;\n\n\t\t\t\t// reset arrays for the next face\n\t\t\t\tfacePositionIndexes = [];\n\t\t\t\tfaceNormals = [];\n\t\t\t\tfaceColors = [];\n\t\t\t\tfaceUVs = [];\n\t\t\t\tfaceWeights = [];\n\t\t\t\tfaceWeightIndices = [];\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn buffers;\n\n\t}\n\n\t// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\tgenFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {\n\n\t\tfor ( let i = 2; i < faceLength; i ++ ) {\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 0 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 2 ] ] );\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 2 ] ] );\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 2 ] ] );\n\n\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 0 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 3 ] );\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 0 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 3 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\tbuffers.colors.push( faceColors[ 0 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ 2 ] );\n\n\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\tbuffers.colors.push( faceColors[ i * 3 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\tbuffers.normal.push( faceNormals[ 0 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ 2 ] );\n\n\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\tgeoInfo.uv.forEach( function ( uv, j ) {\n\n\t\t\t\t\tif ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 0 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 1 ] );\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 + 1 ] );\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 + 1 ] );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\taddMorphTargets( parentGeo, parentGeoNode, morphTargets, preTransform ) {\n\n\t\tif ( morphTargets.length === 0 ) return;\n\n\t\tparentGeo.morphTargetsRelative = true;\n\n\t\tparentGeo.morphAttributes.position = [];\n\t\t// parentGeo.morphAttributes.normal = []; // not implemented\n\n\t\tconst scope = this;\n\t\tmorphTargets.forEach( function ( morphTarget ) {\n\n\t\t\tmorphTarget.rawTargets.forEach( function ( rawTarget ) {\n\n\t\t\t\tconst morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];\n\n\t\t\t\tif ( morphGeoNode !== undefined ) {\n\n\t\t\t\t\tscope.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\t// a morph geometry node is similar to a standard  node, and the node is also contained\n\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n\t// and a special attribute Index defining which vertices of the original geometry are affected\n\t// Normal and position attributes only have data for the vertices that are affected by the morph\n\tgenMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, name ) {\n\n\t\tconst vertexIndices = ( parentGeoNode.PolygonVertexIndex !== undefined ) ? parentGeoNode.PolygonVertexIndex.a : [];\n\n\t\tconst morphPositionsSparse = ( morphGeoNode.Vertices !== undefined ) ? morphGeoNode.Vertices.a : [];\n\t\tconst indices = ( morphGeoNode.Indexes !== undefined ) ? morphGeoNode.Indexes.a : [];\n\n\t\tconst length = parentGeo.attributes.position.count * 3;\n\t\tconst morphPositions = new Float32Array( length );\n\n\t\tfor ( let i = 0; i < indices.length; i ++ ) {\n\n\t\t\tconst morphIndex = indices[ i ] * 3;\n\n\t\t\tmorphPositions[ morphIndex ] = morphPositionsSparse[ i * 3 ];\n\t\t\tmorphPositions[ morphIndex + 1 ] = morphPositionsSparse[ i * 3 + 1 ];\n\t\t\tmorphPositions[ morphIndex + 2 ] = morphPositionsSparse[ i * 3 + 2 ];\n\n\t\t}\n\n\t\t// TODO: add morph normal support\n\t\tconst morphGeoInfo = {\n\t\t\tvertexIndices: vertexIndices,\n\t\t\tvertexPositions: morphPositions,\n\n\t\t};\n\n\t\tconst morphBuffers = this.genBuffers( morphGeoInfo );\n\n\t\tconst positionAttribute = new Float32BufferAttribute( morphBuffers.vertex, 3 );\n\t\tpositionAttribute.name = name || morphGeoNode.attrName;\n\n\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\tparentGeo.morphAttributes.position.push( positionAttribute );\n\n\t}\n\n\t// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\tparseNormals( NormalNode ) {\n\n\t\tconst mappingType = NormalNode.MappingInformationType;\n\t\tconst referenceType = NormalNode.ReferenceInformationType;\n\t\tconst buffer = NormalNode.Normals.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tif ( 'NormalIndex' in NormalNode ) {\n\n\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\n\n\t\t\t} else if ( 'NormalsIndex' in NormalNode ) {\n\n\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 3,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\tparseUVs( UVNode ) {\n\n\t\tconst mappingType = UVNode.MappingInformationType;\n\t\tconst referenceType = UVNode.ReferenceInformationType;\n\t\tconst buffer = UVNode.UV.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 2,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\tparseVertexColors( ColorNode ) {\n\n\t\tconst mappingType = ColorNode.MappingInformationType;\n\t\tconst referenceType = ColorNode.ReferenceInformationType;\n\t\tconst buffer = ColorNode.Colors.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tindexBuffer = ColorNode.ColorIndex.a;\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 4,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\tparseMaterialIndices( MaterialNode ) {\n\n\t\tconst mappingType = MaterialNode.MappingInformationType;\n\t\tconst referenceType = MaterialNode.ReferenceInformationType;\n\n\t\tif ( mappingType === 'NoMappingInformation' ) {\n\n\t\t\treturn {\n\t\t\t\tdataSize: 1,\n\t\t\t\tbuffer: [ 0 ],\n\t\t\t\tindices: [ 0 ],\n\t\t\t\tmappingType: 'AllSame',\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t}\n\n\t\tconst materialIndexBuffer = MaterialNode.Materials.a;\n\n\t\t// Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\n\t\t// for conforming with the other functions we've written for other data.\n\t\tconst materialIndices = [];\n\n\t\tfor ( let i = 0; i < materialIndexBuffer.length; ++ i ) {\n\n\t\t\tmaterialIndices.push( i );\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 1,\n\t\t\tbuffer: materialIndexBuffer,\n\t\t\tindices: materialIndices,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\tparseNurbsGeometry( geoNode ) {\n\n\t\tif ( NURBSCurve === undefined ) {\n\n\t\t\tconsole.error( 'THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.' );\n\t\t\treturn new BufferGeometry();\n\n\t\t}\n\n\t\tconst order = parseInt( geoNode.Order );\n\n\t\tif ( isNaN( order ) ) {\n\n\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\n\t\t\treturn new BufferGeometry();\n\n\t\t}\n\n\t\tconst degree = order - 1;\n\n\t\tconst knots = geoNode.KnotVector.a;\n\t\tconst controlPoints = [];\n\t\tconst pointsValues = geoNode.Points.a;\n\n\t\tfor ( let i = 0, l = pointsValues.length; i < l; i += 4 ) {\n\n\t\t\tcontrolPoints.push( new Vector4().fromArray( pointsValues, i ) );\n\n\t\t}\n\n\t\tlet startKnot, endKnot;\n\n\t\tif ( geoNode.Form === 'Closed' ) {\n\n\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\n\n\t\t} else if ( geoNode.Form === 'Periodic' ) {\n\n\t\t\tstartKnot = degree;\n\t\t\tendKnot = knots.length - 1 - startKnot;\n\n\t\t\tfor ( let i = 0; i < degree; ++ i ) {\n\n\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst curve = new NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\n\t\tconst points = curve.getPoints( controlPoints.length * 12 );\n\n\t\treturn new BufferGeometry().setFromPoints( points );\n\n\t}\n\n}\n\n// parse animation data from FBXTree\nclass AnimationParser {\n\n\t// take raw animation clips and turn them into three.js animation clips\n\tparse() {\n\n\t\tconst animationClips = [];\n\n\t\tconst rawClips = this.parseClips();\n\n\t\tif ( rawClips !== undefined ) {\n\n\t\t\tfor ( const key in rawClips ) {\n\n\t\t\t\tconst rawClip = rawClips[ key ];\n\n\t\t\t\tconst clip = this.addClip( rawClip );\n\n\t\t\t\tanimationClips.push( clip );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animationClips;\n\n\t}\n\n\tparseClips() {\n\n\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n\t\t// if this is undefined we can safely assume there are no animations\n\t\tif ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;\n\n\t\tconst curveNodesMap = this.parseAnimationCurveNodes();\n\n\t\tthis.parseAnimationCurves( curveNodesMap );\n\n\t\tconst layersMap = this.parseAnimationLayers( curveNodesMap );\n\t\tconst rawClips = this.parseAnimStacks( layersMap );\n\n\t\treturn rawClips;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationCurveNode\n\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n\t// and is referenced by an AnimationLayer\n\tparseAnimationCurveNodes() {\n\n\t\tconst rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n\n\t\tconst curveNodesMap = new Map();\n\n\t\tfor ( const nodeID in rawCurveNodes ) {\n\n\t\t\tconst rawCurveNode = rawCurveNodes[ nodeID ];\n\n\t\t\tif ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {\n\n\t\t\t\tconst curveNode = {\n\n\t\t\t\t\tid: rawCurveNode.id,\n\t\t\t\t\tattr: rawCurveNode.attrName,\n\t\t\t\t\tcurves: {},\n\n\t\t\t\t};\n\n\t\t\t\tcurveNodesMap.set( curveNode.id, curveNode );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn curveNodesMap;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n\t// axis ( e.g. times and values of x rotation)\n\tparseAnimationCurves( curveNodesMap ) {\n\n\t\tconst rawCurves = fbxTree.Objects.AnimationCurve;\n\n\t\t// TODO: Many values are identical up to roundoff error, but won't be optimised\n\t\t// e.g. position times: [0, 0.4, 0. 8]\n\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n\t\t// clearly, this should be optimised to\n\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\n\n\t\tfor ( const nodeID in rawCurves ) {\n\n\t\t\tconst animationCurve = {\n\n\t\t\t\tid: rawCurves[ nodeID ].id,\n\t\t\t\ttimes: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),\n\t\t\t\tvalues: rawCurves[ nodeID ].KeyValueFloat.a,\n\n\t\t\t};\n\n\t\t\tconst relationships = connections.get( animationCurve.id );\n\n\t\t\tif ( relationships !== undefined ) {\n\n\t\t\t\tconst animationCurveID = relationships.parents[ 0 ].ID;\n\t\t\t\tconst animationCurveRelationship = relationships.parents[ 0 ].relationship;\n\n\t\t\t\tif ( animationCurveRelationship.match( /X/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /Y/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /Z/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /d|DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\n\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\tparseAnimationLayers( curveNodesMap ) {\n\n\t\tconst rawLayers = fbxTree.Objects.AnimationLayer;\n\n\t\tconst layersMap = new Map();\n\n\t\tfor ( const nodeID in rawLayers ) {\n\n\t\t\tconst layerCurveNodes = [];\n\n\t\t\tconst connection = connections.get( parseInt( nodeID ) );\n\n\t\t\tif ( connection !== undefined ) {\n\n\t\t\t\t// all the animationCurveNodes used in the layer\n\t\t\t\tconst children = connection.children;\n\n\t\t\t\tchildren.forEach( function ( child, i ) {\n\n\t\t\t\t\tif ( curveNodesMap.has( child.ID ) ) {\n\n\t\t\t\t\t\tconst curveNode = curveNodesMap.get( child.ID );\n\n\t\t\t\t\t\t// check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\t\t\t\t\t\tif ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconst modelID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tif ( modelID !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[ modelID.toString() ];\n\n\t\t\t\t\t\t\t\t\tif ( rawModel === undefined ) {\n\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered a unused curve.', child );\n\t\t\t\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst node = {\n\n\t\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\t\tID: rawModel.id,\n\t\t\t\t\t\t\t\t\t\tinitialPosition: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialRotation: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialScale: [ 1, 1, 1 ],\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( child.ID === rawModel.id ) {\n\n\t\t\t\t\t\t\t\t\t\t\tnode.transform = child.matrix;\n\n\t\t\t\t\t\t\t\t\t\t\tif ( child.userData.transformData ) node.eulerOrder = child.userData.transformData.eulerOrder;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\tif ( ! node.transform ) node.transform = new Matrix4();\n\n\t\t\t\t\t\t\t\t\t// if the animated model is pre rotated, we'll have to apply the pre rotations to every\n\t\t\t\t\t\t\t\t\t// animation value as well\n\t\t\t\t\t\t\t\t\tif ( 'PreRotation' in rawModel ) node.preRotation = rawModel.PreRotation.value;\n\t\t\t\t\t\t\t\t\tif ( 'PostRotation' in rawModel ) node.postRotation = rawModel.PostRotation.value;\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] ) layerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t} else if ( curveNode.curves.morph !== undefined ) {\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconst deformerID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tconst morpherID = connections.get( deformerID ).parents[ 0 ].ID;\n\t\t\t\t\t\t\t\tconst geoID = connections.get( morpherID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t// assuming geometry is not used in more than one model\n\t\t\t\t\t\t\t\tconst modelID = connections.get( geoID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[ modelID ];\n\n\t\t\t\t\t\t\t\tconst node = {\n\n\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[ deformerID ].attrName,\n\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tlayersMap.set( parseInt( nodeID ), layerCurveNodes );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn layersMap;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n\t// hierarchy. Each Stack node will be used to create a AnimationClip\n\tparseAnimStacks( layersMap ) {\n\n\t\tconst rawStacks = fbxTree.Objects.AnimationStack;\n\n\t\t// connect the stacks (clips) up to the layers\n\t\tconst rawClips = {};\n\n\t\tfor ( const nodeID in rawStacks ) {\n\n\t\t\tconst children = connections.get( parseInt( nodeID ) ).children;\n\n\t\t\tif ( children.length > 1 ) {\n\n\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\n\t\t\t\t// where there are multiple layers per stack, we'll display a warning\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );\n\n\t\t\t}\n\n\t\t\tconst layer = layersMap.get( children[ 0 ].ID );\n\n\t\t\trawClips[ nodeID ] = {\n\n\t\t\t\tname: rawStacks[ nodeID ].attrName,\n\t\t\t\tlayer: layer,\n\n\t\t\t};\n\n\t\t}\n\n\t\treturn rawClips;\n\n\t}\n\n\taddClip( rawClip ) {\n\n\t\tlet tracks = [];\n\n\t\tconst scope = this;\n\t\trawClip.layer.forEach( function ( rawTracks ) {\n\n\t\t\ttracks = tracks.concat( scope.generateTracks( rawTracks ) );\n\n\t\t} );\n\n\t\treturn new AnimationClip( rawClip.name, - 1, tracks );\n\n\t}\n\n\tgenerateTracks( rawTracks ) {\n\n\t\tconst tracks = [];\n\n\t\tlet initialPosition = new Vector3();\n\t\tlet initialRotation = new Quaternion();\n\t\tlet initialScale = new Vector3();\n\n\t\tif ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, initialRotation, initialScale );\n\n\t\tinitialPosition = initialPosition.toArray();\n\t\tinitialRotation = new Euler().setFromQuaternion( initialRotation, rawTracks.eulerOrder ).toArray();\n\t\tinitialScale = initialScale.toArray();\n\n\t\tif ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {\n\n\t\t\tconst positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );\n\t\t\tif ( positionTrack !== undefined ) tracks.push( positionTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {\n\n\t\t\tconst rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder );\n\t\t\tif ( rotationTrack !== undefined ) tracks.push( rotationTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {\n\n\t\t\tconst scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );\n\t\t\tif ( scaleTrack !== undefined ) tracks.push( scaleTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.DeformPercent !== undefined ) {\n\n\t\t\tconst morphTrack = this.generateMorphTrack( rawTracks );\n\t\t\tif ( morphTrack !== undefined ) tracks.push( morphTrack );\n\n\t\t}\n\n\t\treturn tracks;\n\n\t}\n\n\tgenerateVectorTrack( modelName, curves, initialValue, type ) {\n\n\t\tconst times = this.getTimesForAllAxes( curves );\n\t\tconst values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\treturn new VectorKeyframeTrack( modelName + '.' + type, times, values );\n\n\t}\n\n\tgenerateRotationTrack( modelName, curves, initialValue, preRotation, postRotation, eulerOrder ) {\n\n\t\tif ( curves.x !== undefined ) {\n\n\t\t\tthis.interpolateRotations( curves.x );\n\t\t\tcurves.x.values = curves.x.values.map( MathUtils.degToRad );\n\n\t\t}\n\n\t\tif ( curves.y !== undefined ) {\n\n\t\t\tthis.interpolateRotations( curves.y );\n\t\t\tcurves.y.values = curves.y.values.map( MathUtils.degToRad );\n\n\t\t}\n\n\t\tif ( curves.z !== undefined ) {\n\n\t\t\tthis.interpolateRotations( curves.z );\n\t\t\tcurves.z.values = curves.z.values.map( MathUtils.degToRad );\n\n\t\t}\n\n\t\tconst times = this.getTimesForAllAxes( curves );\n\t\tconst values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\tif ( preRotation !== undefined ) {\n\n\t\t\tpreRotation = preRotation.map( MathUtils.degToRad );\n\t\t\tpreRotation.push( eulerOrder );\n\n\t\t\tpreRotation = new Euler().fromArray( preRotation );\n\t\t\tpreRotation = new Quaternion().setFromEuler( preRotation );\n\n\t\t}\n\n\t\tif ( postRotation !== undefined ) {\n\n\t\t\tpostRotation = postRotation.map( MathUtils.degToRad );\n\t\t\tpostRotation.push( eulerOrder );\n\n\t\t\tpostRotation = new Euler().fromArray( postRotation );\n\t\t\tpostRotation = new Quaternion().setFromEuler( postRotation ).invert();\n\n\t\t}\n\n\t\tconst quaternion = new Quaternion();\n\t\tconst euler = new Euler();\n\n\t\tconst quaternionValues = [];\n\n\t\tfor ( let i = 0; i < values.length; i += 3 ) {\n\n\t\t\teuler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], eulerOrder );\n\n\t\t\tquaternion.setFromEuler( euler );\n\n\t\t\tif ( preRotation !== undefined ) quaternion.premultiply( preRotation );\n\t\t\tif ( postRotation !== undefined ) quaternion.multiply( postRotation );\n\n\t\t\tquaternion.toArray( quaternionValues, ( i / 3 ) * 4 );\n\n\t\t}\n\n\t\treturn new QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );\n\n\t}\n\n\tgenerateMorphTrack( rawTracks ) {\n\n\t\tconst curves = rawTracks.DeformPercent.curves.morph;\n\t\tconst values = curves.values.map( function ( val ) {\n\n\t\t\treturn val / 100;\n\n\t\t} );\n\n\t\tconst morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];\n\n\t\treturn new NumberKeyframeTrack( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );\n\n\t}\n\n\t// For all animated objects, times are defined separately for each axis\n\t// Here we'll combine the times into one sorted array without duplicates\n\tgetTimesForAllAxes( curves ) {\n\n\t\tlet times = [];\n\n\t\t// first join together the times for each axis, if defined\n\t\tif ( curves.x !== undefined ) times = times.concat( curves.x.times );\n\t\tif ( curves.y !== undefined ) times = times.concat( curves.y.times );\n\t\tif ( curves.z !== undefined ) times = times.concat( curves.z.times );\n\n\t\t// then sort them\n\t\ttimes = times.sort( function ( a, b ) {\n\n\t\t\treturn a - b;\n\n\t\t} );\n\n\t\t// and remove duplicates\n\t\tif ( times.length > 1 ) {\n\n\t\t\tlet targetIndex = 1;\n\t\t\tlet lastValue = times[ 0 ];\n\t\t\tfor ( let i = 1; i < times.length; i ++ ) {\n\n\t\t\t\tconst currentValue = times[ i ];\n\t\t\t\tif ( currentValue !== lastValue ) {\n\n\t\t\t\t\ttimes[ targetIndex ] = currentValue;\n\t\t\t\t\tlastValue = currentValue;\n\t\t\t\t\ttargetIndex ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttimes = times.slice( 0, targetIndex );\n\n\t\t}\n\n\t\treturn times;\n\n\t}\n\n\tgetKeyframeTrackValues( times, curves, initialValue ) {\n\n\t\tconst prevValue = initialValue;\n\n\t\tconst values = [];\n\n\t\tlet xIndex = - 1;\n\t\tlet yIndex = - 1;\n\t\tlet zIndex = - 1;\n\n\t\ttimes.forEach( function ( time ) {\n\n\t\t\tif ( curves.x ) xIndex = curves.x.times.indexOf( time );\n\t\t\tif ( curves.y ) yIndex = curves.y.times.indexOf( time );\n\t\t\tif ( curves.z ) zIndex = curves.z.times.indexOf( time );\n\n\t\t\t// if there is an x value defined for this frame, use that\n\t\t\tif ( xIndex !== - 1 ) {\n\n\t\t\t\tconst xValue = curves.x.values[ xIndex ];\n\t\t\t\tvalues.push( xValue );\n\t\t\t\tprevValue[ 0 ] = xValue;\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise use the x value from the previous frame\n\t\t\t\tvalues.push( prevValue[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( yIndex !== - 1 ) {\n\n\t\t\t\tconst yValue = curves.y.values[ yIndex ];\n\t\t\t\tvalues.push( yValue );\n\t\t\t\tprevValue[ 1 ] = yValue;\n\n\t\t\t} else {\n\n\t\t\t\tvalues.push( prevValue[ 1 ] );\n\n\t\t\t}\n\n\t\t\tif ( zIndex !== - 1 ) {\n\n\t\t\t\tconst zValue = curves.z.values[ zIndex ];\n\t\t\t\tvalues.push( zValue );\n\t\t\t\tprevValue[ 2 ] = zValue;\n\n\t\t\t} else {\n\n\t\t\t\tvalues.push( prevValue[ 2 ] );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn values;\n\n\t}\n\n\t// Rotations are defined as Euler angles which can have values  of any size\n\t// These will be converted to quaternions which don't support values greater than\n\t// PI, so we'll interpolate large rotations\n\tinterpolateRotations( curve ) {\n\n\t\tfor ( let i = 1; i < curve.values.length; i ++ ) {\n\n\t\t\tconst initialValue = curve.values[ i - 1 ];\n\t\t\tconst valuesSpan = curve.values[ i ] - initialValue;\n\n\t\t\tconst absoluteSpan = Math.abs( valuesSpan );\n\n\t\t\tif ( absoluteSpan >= 180 ) {\n\n\t\t\t\tconst numSubIntervals = absoluteSpan / 180;\n\n\t\t\t\tconst step = valuesSpan / numSubIntervals;\n\t\t\t\tlet nextValue = initialValue + step;\n\n\t\t\t\tconst initialTime = curve.times[ i - 1 ];\n\t\t\t\tconst timeSpan = curve.times[ i ] - initialTime;\n\t\t\t\tconst interval = timeSpan / numSubIntervals;\n\t\t\t\tlet nextTime = initialTime + interval;\n\n\t\t\t\tconst interpolatedTimes = [];\n\t\t\t\tconst interpolatedValues = [];\n\n\t\t\t\twhile ( nextTime < curve.times[ i ] ) {\n\n\t\t\t\t\tinterpolatedTimes.push( nextTime );\n\t\t\t\t\tnextTime += interval;\n\n\t\t\t\t\tinterpolatedValues.push( nextValue );\n\t\t\t\t\tnextValue += step;\n\n\t\t\t\t}\n\n\t\t\t\tcurve.times = inject( curve.times, i, interpolatedTimes );\n\t\t\t\tcurve.values = inject( curve.values, i, interpolatedValues );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n// parse an FBX file in ASCII format\nclass TextParser {\n\n\tgetPrevNode() {\n\n\t\treturn this.nodeStack[ this.currentIndent - 2 ];\n\n\t}\n\n\tgetCurrentNode() {\n\n\t\treturn this.nodeStack[ this.currentIndent - 1 ];\n\n\t}\n\n\tgetCurrentProp() {\n\n\t\treturn this.currentProp;\n\n\t}\n\n\tpushStack( node ) {\n\n\t\tthis.nodeStack.push( node );\n\t\tthis.currentIndent += 1;\n\n\t}\n\n\tpopStack() {\n\n\t\tthis.nodeStack.pop();\n\t\tthis.currentIndent -= 1;\n\n\t}\n\n\tsetCurrentProp( val, name ) {\n\n\t\tthis.currentProp = val;\n\t\tthis.currentPropName = name;\n\n\t}\n\n\tparse( text ) {\n\n\t\tthis.currentIndent = 0;\n\n\t\tthis.allNodes = new FBXTree();\n\t\tthis.nodeStack = [];\n\t\tthis.currentProp = [];\n\t\tthis.currentPropName = '';\n\n\t\tconst scope = this;\n\n\t\tconst split = text.split( /[\\r\\n]+/ );\n\n\t\tsplit.forEach( function ( line, i ) {\n\n\t\t\tconst matchComment = line.match( /^[\\s\\t]*;/ );\n\t\t\tconst matchEmpty = line.match( /^[\\s\\t]*$/ );\n\n\t\t\tif ( matchComment || matchEmpty ) return;\n\n\t\t\tconst matchBeginning = line.match( '^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '' );\n\t\t\tconst matchProperty = line.match( '^\\\\t{' + ( scope.currentIndent ) + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)' );\n\t\t\tconst matchEnd = line.match( '^\\\\t{' + ( scope.currentIndent - 1 ) + '}}' );\n\n\t\t\tif ( matchBeginning ) {\n\n\t\t\t\tscope.parseNodeBegin( line, matchBeginning );\n\n\t\t\t} else if ( matchProperty ) {\n\n\t\t\t\tscope.parseNodeProperty( line, matchProperty, split[ ++ i ] );\n\n\t\t\t} else if ( matchEnd ) {\n\n\t\t\t\tscope.popStack();\n\n\t\t\t} else if ( line.match( /^[^\\s\\t}]/ ) ) {\n\n\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\n\t\t\t\t// if this is encountered the line needs to be joined to the previous line\n\t\t\t\tscope.parseNodePropertyContinued( line );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this.allNodes;\n\n\t}\n\n\tparseNodeBegin( line, property ) {\n\n\t\tconst nodeName = property[ 1 ].trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\tconst nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {\n\n\t\t\treturn attr.trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t} );\n\n\t\tconst node = { name: nodeName };\n\t\tconst attrs = this.parseNodeAttr( nodeAttrs );\n\n\t\tconst currentNode = this.getCurrentNode();\n\n\t\t// a top node\n\t\tif ( this.currentIndent === 0 ) {\n\n\t\t\tthis.allNodes.add( nodeName, node );\n\n\t\t} else { // a subnode\n\n\t\t\t// if the subnode already exists, append it\n\t\t\tif ( nodeName in currentNode ) {\n\n\t\t\t\t// special case Pose needs PoseNodes as an array\n\t\t\t\tif ( nodeName === 'PoseNode' ) {\n\n\t\t\t\t\tcurrentNode.PoseNode.push( node );\n\n\t\t\t\t} else if ( currentNode[ nodeName ].id !== undefined ) {\n\n\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\tcurrentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t} else if ( typeof attrs.id === 'number' ) {\n\n\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\tcurrentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t} else if ( nodeName !== 'Properties70' ) {\n\n\t\t\t\tif ( nodeName === 'PoseNode' )\tcurrentNode[ nodeName ] = [ node ];\n\t\t\t\telse currentNode[ nodeName ] = node;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( typeof attrs.id === 'number' ) node.id = attrs.id;\n\t\tif ( attrs.name !== '' ) node.attrName = attrs.name;\n\t\tif ( attrs.type !== '' ) node.attrType = attrs.type;\n\n\t\tthis.pushStack( node );\n\n\t}\n\n\tparseNodeAttr( attrs ) {\n\n\t\tlet id = attrs[ 0 ];\n\n\t\tif ( attrs[ 0 ] !== '' ) {\n\n\t\t\tid = parseInt( attrs[ 0 ] );\n\n\t\t\tif ( isNaN( id ) ) {\n\n\t\t\t\tid = attrs[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet name = '', type = '';\n\n\t\tif ( attrs.length > 1 ) {\n\n\t\t\tname = attrs[ 1 ].replace( /^(\\w+)::/, '' );\n\t\t\ttype = attrs[ 2 ];\n\n\t\t}\n\n\t\treturn { id: id, name: name, type: type };\n\n\t}\n\n\tparseNodeProperty( line, property, contentLine ) {\n\n\t\tlet propName = property[ 1 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\t\tlet propValue = property[ 2 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\n\t\t// for special case: base64 image data follows \"Content: ,\" line\n\t\t//\tContent: ,\n\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\n\t\tif ( propName === 'Content' && propValue === ',' ) {\n\n\t\t\tpropValue = contentLine.replace( /\"/g, '' ).replace( /,$/, '' ).trim();\n\n\t\t}\n\n\t\tconst currentNode = this.getCurrentNode();\n\t\tconst parentName = currentNode.name;\n\n\t\tif ( parentName === 'Properties70' ) {\n\n\t\t\tthis.parseNodeSpecialProperty( line, propName, propValue );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Connections\n\t\tif ( propName === 'C' ) {\n\n\t\t\tconst connProps = propValue.split( ',' ).slice( 1 );\n\t\t\tconst from = parseInt( connProps[ 0 ] );\n\t\t\tconst to = parseInt( connProps[ 1 ] );\n\n\t\t\tlet rest = propValue.split( ',' ).slice( 3 );\n\n\t\t\trest = rest.map( function ( elem ) {\n\n\t\t\t\treturn elem.trim().replace( /^\"/, '' );\n\n\t\t\t} );\n\n\t\t\tpropName = 'connections';\n\t\t\tpropValue = [ from, to ];\n\t\t\tappend( propValue, rest );\n\n\t\t\tif ( currentNode[ propName ] === undefined ) {\n\n\t\t\t\tcurrentNode[ propName ] = [];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Node\n\t\tif ( propName === 'Node' ) currentNode.id = propValue;\n\n\t\t// connections\n\t\tif ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {\n\n\t\t\tcurrentNode[ propName ].push( propValue );\n\n\t\t} else {\n\n\t\t\tif ( propName !== 'a' ) currentNode[ propName ] = propValue;\n\t\t\telse currentNode.a = propValue;\n\n\t\t}\n\n\t\tthis.setCurrentProp( currentNode, propName );\n\n\t\t// convert string to array, unless it ends in ',' in which case more will be added to it\n\t\tif ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {\n\n\t\t\tcurrentNode.a = parseNumberArray( propValue );\n\n\t\t}\n\n\t}\n\n\tparseNodePropertyContinued( line ) {\n\n\t\tconst currentNode = this.getCurrentNode();\n\n\t\tcurrentNode.a += line;\n\n\t\t// if the line doesn't end in ',' we have reached the end of the property value\n\t\t// so convert the string to an array\n\t\tif ( line.slice( - 1 ) !== ',' ) {\n\n\t\t\tcurrentNode.a = parseNumberArray( currentNode.a );\n\n\t\t}\n\n\t}\n\n\t// parse \"Property70\"\n\tparseNodeSpecialProperty( line, propName, propValue ) {\n\n\t\t// split this\n\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n\t\t// into array like below\n\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n\t\tconst props = propValue.split( '\",' ).map( function ( prop ) {\n\n\t\t\treturn prop.trim().replace( /^\\\"/, '' ).replace( /\\s/, '_' );\n\n\t\t} );\n\n\t\tconst innerPropName = props[ 0 ];\n\t\tconst innerPropType1 = props[ 1 ];\n\t\tconst innerPropType2 = props[ 2 ];\n\t\tconst innerPropFlag = props[ 3 ];\n\t\tlet innerPropValue = props[ 4 ];\n\n\t\t// cast values where needed, otherwise leave as strings\n\t\tswitch ( innerPropType1 ) {\n\n\t\t\tcase 'int':\n\t\t\tcase 'enum':\n\t\t\tcase 'bool':\n\t\t\tcase 'ULongLong':\n\t\t\tcase 'double':\n\t\t\tcase 'Number':\n\t\t\tcase 'FieldOfView':\n\t\t\t\tinnerPropValue = parseFloat( innerPropValue );\n\t\t\t\tbreak;\n\n\t\t\tcase 'Color':\n\t\t\tcase 'ColorRGB':\n\t\t\tcase 'Vector3D':\n\t\t\tcase 'Lcl_Translation':\n\t\t\tcase 'Lcl_Rotation':\n\t\t\tcase 'Lcl_Scaling':\n\t\t\t\tinnerPropValue = parseNumberArray( innerPropValue );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t// CAUTION: these props must append to parent's parent\n\t\tthis.getPrevNode()[ innerPropName ] = {\n\n\t\t\t'type': innerPropType1,\n\t\t\t'type2': innerPropType2,\n\t\t\t'flag': innerPropFlag,\n\t\t\t'value': innerPropValue\n\n\t\t};\n\n\t\tthis.setCurrentProp( this.getPrevNode(), innerPropName );\n\n\t}\n\n}\n\n// Parse an FBX file in Binary format\nclass BinaryParser {\n\n\tparse( buffer ) {\n\n\t\tconst reader = new BinaryReader( buffer );\n\t\treader.skip( 23 ); // skip magic 23 bytes\n\n\t\tconst version = reader.getUint32();\n\n\t\tif ( version < 6400 ) {\n\n\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + version );\n\n\t\t}\n\n\t\tconst allNodes = new FBXTree();\n\n\t\twhile ( ! this.endOfContent( reader ) ) {\n\n\t\t\tconst node = this.parseNode( reader, version );\n\t\t\tif ( node !== null ) allNodes.add( node.name, node );\n\n\t\t}\n\n\t\treturn allNodes;\n\n\t}\n\n\t// Check if reader has reached the end of content.\n\tendOfContent( reader ) {\n\n\t\t// footer size: 160bytes + 16-byte alignment padding\n\t\t// - 16bytes: magic\n\t\t// - padding til 16-byte alignment (at least 1byte?)\n\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\n\t\t// - 4bytes: magic\n\t\t// - 4bytes: version\n\t\t// - 120bytes: zero\n\t\t// - 16bytes: magic\n\t\tif ( reader.size() % 16 === 0 ) {\n\n\t\t\treturn ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();\n\n\t\t} else {\n\n\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\n\n\t\t}\n\n\t}\n\n\t// recursively parse nodes until the end of the file is reached\n\tparseNode( reader, version ) {\n\n\t\tconst node = {};\n\n\t\t// The first three data sizes depends on version.\n\t\tconst endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\t\tconst numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t( version >= 7500 ) ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n\t\tconst nameLen = reader.getUint8();\n\t\tconst name = reader.getString( nameLen );\n\n\t\t// Regards this node as NULL-record if endOffset is zero\n\t\tif ( endOffset === 0 ) return null;\n\n\t\tconst propertyList = [];\n\n\t\tfor ( let i = 0; i < numProperties; i ++ ) {\n\n\t\t\tpropertyList.push( this.parseProperty( reader ) );\n\n\t\t}\n\n\t\t// Regards the first three elements in propertyList as id, attrName, and attrType\n\t\tconst id = propertyList.length > 0 ? propertyList[ 0 ] : '';\n\t\tconst attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';\n\t\tconst attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';\n\n\t\t// check if this node represents just a single property\n\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\t\tnode.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;\n\n\t\twhile ( endOffset > reader.getOffset() ) {\n\n\t\t\tconst subNode = this.parseNode( reader, version );\n\n\t\t\tif ( subNode !== null ) this.parseSubNode( name, node, subNode );\n\n\t\t}\n\n\t\tnode.propertyList = propertyList; // raw property list used by parent\n\n\t\tif ( typeof id === 'number' ) node.id = id;\n\t\tif ( attrName !== '' ) node.attrName = attrName;\n\t\tif ( attrType !== '' ) node.attrType = attrType;\n\t\tif ( name !== '' ) node.name = name;\n\n\t\treturn node;\n\n\t}\n\n\tparseSubNode( name, node, subNode ) {\n\n\t\t// special case: child node is single property\n\t\tif ( subNode.singleProperty === true ) {\n\n\t\t\tconst value = subNode.propertyList[ 0 ];\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\tsubNode.a = value;\n\n\t\t\t} else {\n\n\t\t\t\tnode[ subNode.name ] = value;\n\n\t\t\t}\n\n\t\t} else if ( name === 'Connections' && subNode.name === 'C' ) {\n\n\t\t\tconst array = [];\n\n\t\t\tsubNode.propertyList.forEach( function ( property, i ) {\n\n\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\n\t\t\t\tif ( i !== 0 ) array.push( property );\n\n\t\t\t} );\n\n\t\t\tif ( node.connections === undefined ) {\n\n\t\t\t\tnode.connections = [];\n\n\t\t\t}\n\n\t\t\tnode.connections.push( array );\n\n\t\t} else if ( subNode.name === 'Properties70' ) {\n\n\t\t\tconst keys = Object.keys( subNode );\n\n\t\t\tkeys.forEach( function ( key ) {\n\n\t\t\t\tnode[ key ] = subNode[ key ];\n\n\t\t\t} );\n\n\t\t} else if ( name === 'Properties70' && subNode.name === 'P' ) {\n\n\t\t\tlet innerPropName = subNode.propertyList[ 0 ];\n\t\t\tlet innerPropType1 = subNode.propertyList[ 1 ];\n\t\t\tconst innerPropType2 = subNode.propertyList[ 2 ];\n\t\t\tconst innerPropFlag = subNode.propertyList[ 3 ];\n\t\t\tlet innerPropValue;\n\n\t\t\tif ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );\n\t\t\tif ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );\n\n\t\t\tif ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {\n\n\t\t\t\tinnerPropValue = [\n\t\t\t\t\tsubNode.propertyList[ 4 ],\n\t\t\t\t\tsubNode.propertyList[ 5 ],\n\t\t\t\t\tsubNode.propertyList[ 6 ]\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\tinnerPropValue = subNode.propertyList[ 4 ];\n\n\t\t\t}\n\n\t\t\t// this will be copied to parent, see above\n\t\t\tnode[ innerPropName ] = {\n\n\t\t\t\t'type': innerPropType1,\n\t\t\t\t'type2': innerPropType2,\n\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t'value': innerPropValue\n\n\t\t\t};\n\n\t\t} else if ( node[ subNode.name ] === undefined ) {\n\n\t\t\tif ( typeof subNode.id === 'number' ) {\n\n\t\t\t\tnode[ subNode.name ] = {};\n\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t} else {\n\n\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( subNode.name === 'PoseNode' ) {\n\n\t\t\t\tif ( ! Array.isArray( node[ subNode.name ] ) ) {\n\n\t\t\t\t\tnode[ subNode.name ] = [ node[ subNode.name ] ];\n\n\t\t\t\t}\n\n\t\t\t\tnode[ subNode.name ].push( subNode );\n\n\t\t\t} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {\n\n\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tparseProperty( reader ) {\n\n\t\tconst type = reader.getString( 1 );\n\t\tlet length;\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 'C':\n\t\t\t\treturn reader.getBoolean();\n\n\t\t\tcase 'D':\n\t\t\t\treturn reader.getFloat64();\n\n\t\t\tcase 'F':\n\t\t\t\treturn reader.getFloat32();\n\n\t\t\tcase 'I':\n\t\t\t\treturn reader.getInt32();\n\n\t\t\tcase 'L':\n\t\t\t\treturn reader.getInt64();\n\n\t\t\tcase 'R':\n\t\t\t\tlength = reader.getUint32();\n\t\t\t\treturn reader.getArrayBuffer( length );\n\n\t\t\tcase 'S':\n\t\t\t\tlength = reader.getUint32();\n\t\t\t\treturn reader.getString( length );\n\n\t\t\tcase 'Y':\n\t\t\t\treturn reader.getInt16();\n\n\t\t\tcase 'b':\n\t\t\tcase 'c':\n\t\t\tcase 'd':\n\t\t\tcase 'f':\n\t\t\tcase 'i':\n\t\t\tcase 'l':\n\n\t\t\t\tconst arrayLength = reader.getUint32();\n\t\t\t\tconst encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\t\t\t\tconst compressedLength = reader.getUint32();\n\n\t\t\t\tif ( encoding === 0 ) {\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\treturn reader.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\treturn reader.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\treturn reader.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\treturn reader.getInt32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\treturn reader.getInt64Array( arrayLength );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( typeof fflate === 'undefined' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.FBXLoader: External library fflate.min.js required.' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data = fflate.unzlibSync( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) ); // eslint-disable-line no-undef\n\t\t\t\tconst reader2 = new BinaryReader( data.buffer );\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\treturn reader2.getBooleanArray( arrayLength );\n\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\treturn reader2.getFloat64Array( arrayLength );\n\n\t\t\t\t\tcase 'f':\n\t\t\t\t\t\treturn reader2.getFloat32Array( arrayLength );\n\n\t\t\t\t\tcase 'i':\n\t\t\t\t\t\treturn reader2.getInt32Array( arrayLength );\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\treturn reader2.getInt64Array( arrayLength );\n\n\t\t\t\t}\n\n\t\t\t\tbreak; // cannot happen but is required by the DeepScan\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown property type ' + type );\n\n\t\t}\n\n\t}\n\n}\n\nclass BinaryReader {\n\n\tconstructor( buffer, littleEndian ) {\n\n\t\tthis.dv = new DataView( buffer );\n\t\tthis.offset = 0;\n\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\n\n\t}\n\n\tgetOffset() {\n\n\t\treturn this.offset;\n\n\t}\n\n\tsize() {\n\n\t\treturn this.dv.buffer.byteLength;\n\n\t}\n\n\tskip( length ) {\n\n\t\tthis.offset += length;\n\n\t}\n\n\t// seems like true/false representation depends on exporter.\n\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n\t// then sees LSB.\n\tgetBoolean() {\n\n\t\treturn ( this.getUint8() & 1 ) === 1;\n\n\t}\n\n\tgetBooleanArray( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getBoolean() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetUint8() {\n\n\t\tconst value = this.dv.getUint8( this.offset );\n\t\tthis.offset += 1;\n\t\treturn value;\n\n\t}\n\n\tgetInt16() {\n\n\t\tconst value = this.dv.getInt16( this.offset, this.littleEndian );\n\t\tthis.offset += 2;\n\t\treturn value;\n\n\t}\n\n\tgetInt32() {\n\n\t\tconst value = this.dv.getInt32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\tgetInt32Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getInt32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetUint32() {\n\n\t\tconst value = this.dv.getUint32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\t// JavaScript doesn't support 64-bit integer so calculate this here\n\t// 1 << 32 will return 1 so using multiply operation instead here.\n\t// There's a possibility that this method returns wrong value if the value\n\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n\t// TODO: safely handle 64-bit integer\n\tgetInt64() {\n\n\t\tlet low, high;\n\n\t\tif ( this.littleEndian ) {\n\n\t\t\tlow = this.getUint32();\n\t\t\thigh = this.getUint32();\n\n\t\t} else {\n\n\t\t\thigh = this.getUint32();\n\t\t\tlow = this.getUint32();\n\n\t\t}\n\n\t\t// calculate negative value\n\t\tif ( high & 0x80000000 ) {\n\n\t\t\thigh = ~ high & 0xFFFFFFFF;\n\t\t\tlow = ~ low & 0xFFFFFFFF;\n\n\t\t\tif ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;\n\n\t\t\tlow = ( low + 1 ) & 0xFFFFFFFF;\n\n\t\t\treturn - ( high * 0x100000000 + low );\n\n\t\t}\n\n\t\treturn high * 0x100000000 + low;\n\n\t}\n\n\tgetInt64Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getInt64() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\t// Note: see getInt64() comment\n\tgetUint64() {\n\n\t\tlet low, high;\n\n\t\tif ( this.littleEndian ) {\n\n\t\t\tlow = this.getUint32();\n\t\t\thigh = this.getUint32();\n\n\t\t} else {\n\n\t\t\thigh = this.getUint32();\n\t\t\tlow = this.getUint32();\n\n\t\t}\n\n\t\treturn high * 0x100000000 + low;\n\n\t}\n\n\tgetFloat32() {\n\n\t\tconst value = this.dv.getFloat32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\tgetFloat32Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getFloat32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetFloat64() {\n\n\t\tconst value = this.dv.getFloat64( this.offset, this.littleEndian );\n\t\tthis.offset += 8;\n\t\treturn value;\n\n\t}\n\n\tgetFloat64Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getFloat64() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetArrayBuffer( size ) {\n\n\t\tconst value = this.dv.buffer.slice( this.offset, this.offset + size );\n\t\tthis.offset += size;\n\t\treturn value;\n\n\t}\n\n\tgetString( size ) {\n\n\t\t// note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n\t\tlet a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta[ i ] = this.getUint8();\n\n\t\t}\n\n\t\tconst nullByte = a.indexOf( 0 );\n\t\tif ( nullByte >= 0 ) a = a.slice( 0, nullByte );\n\n\t\treturn LoaderUtils.decodeText( new Uint8Array( a ) );\n\n\t}\n\n}\n\n// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\nclass FBXTree {\n\n\tadd( key, val ) {\n\n\t\tthis[ key ] = val;\n\n\t}\n\n}\n\n// ************** UTILITY FUNCTIONS **************\n\nfunction isFbxFormatBinary( buffer ) {\n\n\tconst CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n\n\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );\n\n}\n\nfunction isFbxFormatASCII( text ) {\n\n\tconst CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\' ];\n\n\tlet cursor = 0;\n\n\tfunction read( offset ) {\n\n\t\tconst result = text[ offset - 1 ];\n\t\ttext = text.slice( cursor + offset );\n\t\tcursor ++;\n\t\treturn result;\n\n\t}\n\n\tfor ( let i = 0; i < CORRECT.length; ++ i ) {\n\n\t\tconst num = read( 1 );\n\t\tif ( num === CORRECT[ i ] ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nfunction getFbxVersion( text ) {\n\n\tconst versionRegExp = /FBXVersion: (\\d+)/;\n\tconst match = text.match( versionRegExp );\n\n\tif ( match ) {\n\n\t\tconst version = parseInt( match[ 1 ] );\n\t\treturn version;\n\n\t}\n\n\tthrow new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );\n\n}\n\n// Converts FBX ticks into real time seconds.\nfunction convertFBXTimeToSeconds( time ) {\n\n\treturn time / 46186158000;\n\n}\n\nconst dataArray = [];\n\n// extracts the data from the correct position in the FBX array based on indexing type\nfunction getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {\n\n\tlet index;\n\n\tswitch ( infoObject.mappingType ) {\n\n\t\tcase 'ByPolygonVertex' :\n\t\t\tindex = polygonVertexIndex;\n\t\t\tbreak;\n\t\tcase 'ByPolygon' :\n\t\t\tindex = polygonIndex;\n\t\t\tbreak;\n\t\tcase 'ByVertice' :\n\t\t\tindex = vertexIndex;\n\t\t\tbreak;\n\t\tcase 'AllSame' :\n\t\t\tindex = infoObject.indices[ 0 ];\n\t\t\tbreak;\n\t\tdefault :\n\t\t\tconsole.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );\n\n\t}\n\n\tif ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];\n\n\tconst from = index * infoObject.dataSize;\n\tconst to = from + infoObject.dataSize;\n\n\treturn slice( dataArray, infoObject.buffer, from, to );\n\n}\n\nconst tempEuler = new Euler();\nconst tempVec = new Vector3();\n\n// generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\nfunction generateTransform( transformData ) {\n\n\tconst lTranslationM = new Matrix4();\n\tconst lPreRotationM = new Matrix4();\n\tconst lRotationM = new Matrix4();\n\tconst lPostRotationM = new Matrix4();\n\n\tconst lScalingM = new Matrix4();\n\tconst lScalingPivotM = new Matrix4();\n\tconst lScalingOffsetM = new Matrix4();\n\tconst lRotationOffsetM = new Matrix4();\n\tconst lRotationPivotM = new Matrix4();\n\n\tconst lParentGX = new Matrix4();\n\tconst lParentLX = new Matrix4();\n\tconst lGlobalT = new Matrix4();\n\n\tconst inheritType = ( transformData.inheritType ) ? transformData.inheritType : 0;\n\n\tif ( transformData.translation ) lTranslationM.setPosition( tempVec.fromArray( transformData.translation ) );\n\n\tif ( transformData.preRotation ) {\n\n\t\tconst array = transformData.preRotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder || Euler.DefaultOrder );\n\t\tlPreRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t}\n\n\tif ( transformData.rotation ) {\n\n\t\tconst array = transformData.rotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder || Euler.DefaultOrder );\n\t\tlRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t}\n\n\tif ( transformData.postRotation ) {\n\n\t\tconst array = transformData.postRotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder || Euler.DefaultOrder );\n\t\tlPostRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\t\tlPostRotationM.invert();\n\n\t}\n\n\tif ( transformData.scale ) lScalingM.scale( tempVec.fromArray( transformData.scale ) );\n\n\t// Pivots and offsets\n\tif ( transformData.scalingOffset ) lScalingOffsetM.setPosition( tempVec.fromArray( transformData.scalingOffset ) );\n\tif ( transformData.scalingPivot ) lScalingPivotM.setPosition( tempVec.fromArray( transformData.scalingPivot ) );\n\tif ( transformData.rotationOffset ) lRotationOffsetM.setPosition( tempVec.fromArray( transformData.rotationOffset ) );\n\tif ( transformData.rotationPivot ) lRotationPivotM.setPosition( tempVec.fromArray( transformData.rotationPivot ) );\n\n\t// parent transform\n\tif ( transformData.parentMatrixWorld ) {\n\n\t\tlParentLX.copy( transformData.parentMatrix );\n\t\tlParentGX.copy( transformData.parentMatrixWorld );\n\n\t}\n\n\tconst lLRM = lPreRotationM.clone().multiply( lRotationM ).multiply( lPostRotationM );\n\t// Global Rotation\n\tconst lParentGRM = new Matrix4();\n\tlParentGRM.extractRotation( lParentGX );\n\n\t// Global Shear*Scaling\n\tconst lParentTM = new Matrix4();\n\tlParentTM.copyPosition( lParentGX );\n\n\tconst lParentGRSM = lParentTM.clone().invert().multiply( lParentGX );\n\tconst lParentGSM = lParentGRM.clone().invert().multiply( lParentGRSM );\n\tconst lLSM = lScalingM;\n\n\tconst lGlobalRS = new Matrix4();\n\n\tif ( inheritType === 0 ) {\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM ).multiply( lLSM );\n\n\t} else if ( inheritType === 1 ) {\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lParentGSM ).multiply( lLRM ).multiply( lLSM );\n\n\t} else {\n\n\t\tconst lParentLSM = new Matrix4().scale( new Vector3().setFromMatrixScale( lParentLX ) );\n\t\tconst lParentLSM_inv = lParentLSM.clone().invert();\n\t\tconst lParentGSM_noLocal = lParentGSM.clone().multiply( lParentLSM_inv );\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM_noLocal ).multiply( lLSM );\n\n\t}\n\n\tconst lRotationPivotM_inv = lRotationPivotM.clone().invert();\n\tconst lScalingPivotM_inv = lScalingPivotM.clone().invert();\n\t// Calculate the local transform matrix\n\tlet lTransform = lTranslationM.clone().multiply( lRotationOffsetM ).multiply( lRotationPivotM ).multiply( lPreRotationM ).multiply( lRotationM ).multiply( lPostRotationM ).multiply( lRotationPivotM_inv ).multiply( lScalingOffsetM ).multiply( lScalingPivotM ).multiply( lScalingM ).multiply( lScalingPivotM_inv );\n\n\tconst lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition( lTransform );\n\n\tconst lGlobalTranslation = lParentGX.clone().multiply( lLocalTWithAllPivotAndOffsetInfo );\n\tlGlobalT.copyPosition( lGlobalTranslation );\n\n\tlTransform = lGlobalT.clone().multiply( lGlobalRS );\n\n\t// from global to local\n\tlTransform.premultiply( lParentGX.invert() );\n\n\treturn lTransform;\n\n}\n\n// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\nfunction getEulerOrder( order ) {\n\n\torder = order || 0;\n\n\tconst enums = [\n\t\t'ZYX', // -> XYZ extrinsic\n\t\t'YZX', // -> XZY extrinsic\n\t\t'XZY', // -> YZX extrinsic\n\t\t'ZXY', // -> YXZ extrinsic\n\t\t'YXZ', // -> ZXY extrinsic\n\t\t'XYZ', // -> ZYX extrinsic\n\t\t//'SphericXYZ', // not possible to support\n\t];\n\n\tif ( order === 6 ) {\n\n\t\tconsole.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );\n\t\treturn enums[ 0 ];\n\n\t}\n\n\treturn enums[ order ];\n\n}\n\n// Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\nfunction parseNumberArray( value ) {\n\n\tconst array = value.split( ',' ).map( function ( val ) {\n\n\t\treturn parseFloat( val );\n\n\t} );\n\n\treturn array;\n\n}\n\nfunction convertArrayBufferToString( buffer, from, to ) {\n\n\tif ( from === undefined ) from = 0;\n\tif ( to === undefined ) to = buffer.byteLength;\n\n\treturn LoaderUtils.decodeText( new Uint8Array( buffer, from, to ) );\n\n}\n\nfunction append( a, b ) {\n\n\tfor ( let i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {\n\n\t\ta[ j ] = b[ i ];\n\n\t}\n\n}\n\nfunction slice( a, b, from, to ) {\n\n\tfor ( let i = from, j = 0; i < to; i ++, j ++ ) {\n\n\t\ta[ j ] = b[ i ];\n\n\t}\n\n\treturn a;\n\n}\n\n// inject array a2 into array a1 at index\nfunction inject( a1, index, a2 ) {\n\n\treturn a1.slice( 0, index ).concat( a2 ).concat( a1.slice( index ) );\n\n}\n\nexport { FBXLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}