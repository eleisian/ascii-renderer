{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/GitHub/ascii-renderer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/user/Documents/GitHub/ascii-renderer/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/user/Documents/GitHub/ascii-renderer/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/user/Documents/GitHub/ascii-renderer/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Curve, Vector3, Vector4 } from 'three';\nimport * as NURBSUtils from '../curves/NURBSUtils.js';\n\n/**\n * NURBS curve object\n *\n * Derives from Curve, overriding getPoint and getTangent.\n *\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n *\n **/\nvar NURBSCurve = /*#__PURE__*/function (_Curve) {\n  _inherits(NURBSCurve, _Curve);\n  var _super = _createSuper(NURBSCurve);\n  function NURBSCurve(degree, knots /* array of reals */, controlPoints /* array of Vector(2|3|4) */, startKnot /* index in knots */, endKnot /* index in knots */) {\n    var _this;\n    _classCallCheck(this, NURBSCurve);\n    _this = _super.call(this);\n    _this.degree = degree;\n    _this.knots = knots;\n    _this.controlPoints = [];\n    // Used by periodic NURBS to remove hidden spans\n    _this.startKnot = startKnot || 0;\n    _this.endKnot = endKnot || _this.knots.length - 1;\n    for (var i = 0; i < controlPoints.length; ++i) {\n      // ensure Vector4 for control points\n      var point = controlPoints[i];\n      _this.controlPoints[i] = new Vector4(point.x, point.y, point.z, point.w);\n    }\n    return _this;\n  }\n  _createClass(NURBSCurve, [{\n    key: \"getPoint\",\n    value: function getPoint(t) {\n      var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      var point = optionalTarget;\n      var u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]); // linear mapping t->u\n\n      // following results in (wx, wy, wz, w) homogeneous point\n      var hpoint = NURBSUtils.calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);\n      if (hpoint.w !== 1.0) {\n        // project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)\n        hpoint.divideScalar(hpoint.w);\n      }\n      return point.set(hpoint.x, hpoint.y, hpoint.z);\n    }\n  }, {\n    key: \"getTangent\",\n    value: function getTangent(t) {\n      var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      var tangent = optionalTarget;\n      var u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);\n      var ders = NURBSUtils.calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);\n      tangent.copy(ders[1]).normalize();\n      return tangent;\n    }\n  }]);\n  return NURBSCurve;\n}(Curve);\nexport { NURBSCurve };","map":{"version":3,"names":["Curve","Vector3","Vector4","NURBSUtils","NURBSCurve","_Curve","_inherits","_super","_createSuper","degree","knots","controlPoints","startKnot","endKnot","_this","_classCallCheck","call","length","i","point","x","y","z","w","_createClass","key","value","getPoint","t","optionalTarget","arguments","undefined","u","hpoint","calcBSplinePoint","divideScalar","set","getTangent","tangent","ders","calcNURBSDerivatives","copy","normalize"],"sources":["/Users/user/Documents/GitHub/ascii-renderer/node_modules/three/examples/jsm/curves/NURBSCurve.js"],"sourcesContent":["import {\n\tCurve,\n\tVector3,\n\tVector4\n} from 'three';\nimport * as NURBSUtils from '../curves/NURBSUtils.js';\n\n/**\n * NURBS curve object\n *\n * Derives from Curve, overriding getPoint and getTangent.\n *\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n *\n **/\n\nclass NURBSCurve extends Curve {\n\n\tconstructor(\n\t\tdegree,\n\t\tknots /* array of reals */,\n\t\tcontrolPoints /* array of Vector(2|3|4) */,\n\t\tstartKnot /* index in knots */,\n\t\tendKnot /* index in knots */\n\t) {\n\n\t\tsuper();\n\n\t\tthis.degree = degree;\n\t\tthis.knots = knots;\n\t\tthis.controlPoints = [];\n\t\t// Used by periodic NURBS to remove hidden spans\n\t\tthis.startKnot = startKnot || 0;\n\t\tthis.endKnot = endKnot || ( this.knots.length - 1 );\n\n\t\tfor ( let i = 0; i < controlPoints.length; ++ i ) {\n\n\t\t\t// ensure Vector4 for control points\n\t\t\tconst point = controlPoints[ i ];\n\t\t\tthis.controlPoints[ i ] = new Vector4( point.x, point.y, point.z, point.w );\n\n\t\t}\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst u = this.knots[ this.startKnot ] + t * ( this.knots[ this.endKnot ] - this.knots[ this.startKnot ] ); // linear mapping t->u\n\n\t\t// following results in (wx, wy, wz, w) homogeneous point\n\t\tconst hpoint = NURBSUtils.calcBSplinePoint( this.degree, this.knots, this.controlPoints, u );\n\n\t\tif ( hpoint.w !== 1.0 ) {\n\n\t\t\t// project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)\n\t\t\thpoint.divideScalar( hpoint.w );\n\n\t\t}\n\n\t\treturn point.set( hpoint.x, hpoint.y, hpoint.z );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector3() ) {\n\n\t\tconst tangent = optionalTarget;\n\n\t\tconst u = this.knots[ 0 ] + t * ( this.knots[ this.knots.length - 1 ] - this.knots[ 0 ] );\n\t\tconst ders = NURBSUtils.calcNURBSDerivatives( this.degree, this.knots, this.controlPoints, u, 1 );\n\t\ttangent.copy( ders[ 1 ] ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n}\n\nexport { NURBSCurve };\n"],"mappings":";;;;AAAA,SACCA,KAAK,EACLC,OAAO,EACPC,OAAO,QACD,OAAO;AACd,OAAO,KAAKC,UAAU,MAAM,yBAAyB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,IASMC,UAAU,0BAAAC,MAAA;EAAAC,SAAA,CAAAF,UAAA,EAAAC,MAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,UAAA;EAEf,SAAAA,WACCK,MAAM,EACNC,KAAK,CAAC,sBACNC,aAAa,CAAC,8BACdC,SAAS,CAAC,sBACVC,OAAO,CAAC,sBACP;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAX,UAAA;IAEDU,KAAA,GAAAP,MAAA,CAAAS,IAAA;IAEAF,KAAA,CAAKL,MAAM,GAAGA,MAAM;IACpBK,KAAA,CAAKJ,KAAK,GAAGA,KAAK;IAClBI,KAAA,CAAKH,aAAa,GAAG,EAAE;IACvB;IACAG,KAAA,CAAKF,SAAS,GAAGA,SAAS,IAAI,CAAC;IAC/BE,KAAA,CAAKD,OAAO,GAAGA,OAAO,IAAMC,KAAA,CAAKJ,KAAK,CAACO,MAAM,GAAG,CAAG;IAEnD,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,aAAa,CAACM,MAAM,EAAE,EAAGC,CAAC,EAAG;MAEjD;MACA,IAAMC,KAAK,GAAGR,aAAa,CAAEO,CAAC,CAAE;MAChCJ,KAAA,CAAKH,aAAa,CAAEO,CAAC,CAAE,GAAG,IAAIhB,OAAO,CAAEiB,KAAK,CAACC,CAAC,EAAED,KAAK,CAACE,CAAC,EAAEF,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAC,CAAE;IAE5E;IAAC,OAAAT,KAAA;EAEF;EAACU,YAAA,CAAApB,UAAA;IAAAqB,GAAA;IAAAC,KAAA,EAED,SAAAC,SAAUC,CAAC,EAAmC;MAAA,IAAjCC,cAAc,GAAAC,SAAA,CAAAb,MAAA,QAAAa,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI7B,OAAO,EAAE;MAE1C,IAAMkB,KAAK,GAAGU,cAAc;MAE5B,IAAMG,CAAC,GAAG,IAAI,CAACtB,KAAK,CAAE,IAAI,CAACE,SAAS,CAAE,GAAGgB,CAAC,IAAK,IAAI,CAAClB,KAAK,CAAE,IAAI,CAACG,OAAO,CAAE,GAAG,IAAI,CAACH,KAAK,CAAE,IAAI,CAACE,SAAS,CAAE,CAAE,CAAC,CAAC;;MAE5G;MACA,IAAMqB,MAAM,GAAG9B,UAAU,CAAC+B,gBAAgB,CAAE,IAAI,CAACzB,MAAM,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,aAAa,EAAEqB,CAAC,CAAE;MAE5F,IAAKC,MAAM,CAACV,CAAC,KAAK,GAAG,EAAG;QAEvB;QACAU,MAAM,CAACE,YAAY,CAAEF,MAAM,CAACV,CAAC,CAAE;MAEhC;MAEA,OAAOJ,KAAK,CAACiB,GAAG,CAAEH,MAAM,CAACb,CAAC,EAAEa,MAAM,CAACZ,CAAC,EAAEY,MAAM,CAACX,CAAC,CAAE;IAEjD;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAED,SAAAW,WAAYT,CAAC,EAAmC;MAAA,IAAjCC,cAAc,GAAAC,SAAA,CAAAb,MAAA,QAAAa,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI7B,OAAO,EAAE;MAE5C,IAAMqC,OAAO,GAAGT,cAAc;MAE9B,IAAMG,CAAC,GAAG,IAAI,CAACtB,KAAK,CAAE,CAAC,CAAE,GAAGkB,CAAC,IAAK,IAAI,CAAClB,KAAK,CAAE,IAAI,CAACA,KAAK,CAACO,MAAM,GAAG,CAAC,CAAE,GAAG,IAAI,CAACP,KAAK,CAAE,CAAC,CAAE,CAAE;MACzF,IAAM6B,IAAI,GAAGpC,UAAU,CAACqC,oBAAoB,CAAE,IAAI,CAAC/B,MAAM,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,aAAa,EAAEqB,CAAC,EAAE,CAAC,CAAE;MACjGM,OAAO,CAACG,IAAI,CAAEF,IAAI,CAAE,CAAC,CAAE,CAAE,CAACG,SAAS,EAAE;MAErC,OAAOJ,OAAO;IAEf;EAAC;EAAA,OAAAlC,UAAA;AAAA,EA3DuBJ,KAAK;AA+D9B,SAASI,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}